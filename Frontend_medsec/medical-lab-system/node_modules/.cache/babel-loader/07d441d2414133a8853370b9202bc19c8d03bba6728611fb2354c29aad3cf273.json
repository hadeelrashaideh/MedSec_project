{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auto-login mode for testing - set to true to bypass login screen\nconst AUTO_LOGIN_FOR_TESTING = true;\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Auto-login effect for testing purposes\n  useEffect(() => {\n    if (AUTO_LOGIN_FOR_TESTING && !user) {\n      // Automatically set the user as both lab and doctor for testing\n      setUser({\n        id: \"test_user\",\n        username: \"Test User\",\n        role: \"lab\",\n        // Default to lab, but will provide both permissions\n        hasLabAccess: true,\n        hasDoctorAccess: true\n      });\n    }\n  }, [user]);\n\n  // Login function (simulated)\n  const login = (username, password, role) => {\n    setLoading(true);\n    setError(null);\n\n    // Simulate API call\n    setTimeout(() => {\n      // For demonstration purposes only\n      if (username && password) {\n        setUser({\n          id: \"user123\",\n          username,\n          role: role,\n          // 'lab' or 'doctor'\n          hasLabAccess: role === \"lab\" || AUTO_LOGIN_FOR_TESTING,\n          hasDoctorAccess: role === \"doctor\" || AUTO_LOGIN_FOR_TESTING\n        });\n        setLoading(false);\n      } else {\n        setError(\"Invalid username or password\");\n        setLoading(false);\n      }\n    }, 1000);\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    isLab: (user === null || user === void 0 ? void 0 : user.hasLabAccess) || (user === null || user === void 0 ? void 0 : user.role) === \"lab\",\n    isDoctor: (user === null || user === void 0 ? void 0 : user.hasDoctorAccess) || (user === null || user === void 0 ? void 0 : user.role) === \"doctor\"\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"FOpntwB10H5hCfVzE7D/PZlVbdo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AUTO_LOGIN_FOR_TESTING","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","id","username","role","hasLabAccess","hasDoctorAccess","login","password","setTimeout","logout","value","isAuthenticated","isLab","isDoctor","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/New folder (5)/medical-lab-system/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// Create the auth context\r\nconst AuthContext = createContext();\r\n\r\n// Auto-login mode for testing - set to true to bypass login screen\r\nconst AUTO_LOGIN_FOR_TESTING = true;\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Auto-login effect for testing purposes\r\n  useEffect(() => {\r\n    if (AUTO_LOGIN_FOR_TESTING && !user) {\r\n      // Automatically set the user as both lab and doctor for testing\r\n      setUser({\r\n        id: \"test_user\",\r\n        username: \"Test User\",\r\n        role: \"lab\", // Default to lab, but will provide both permissions\r\n        hasLabAccess: true,\r\n        hasDoctorAccess: true,\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  // Login function (simulated)\r\n  const login = (username, password, role) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      // For demonstration purposes only\r\n      if (username && password) {\r\n        setUser({\r\n          id: \"user123\",\r\n          username,\r\n          role: role, // 'lab' or 'doctor'\r\n          hasLabAccess: role === \"lab\" || AUTO_LOGIN_FOR_TESTING,\r\n          hasDoctorAccess: role === \"doctor\" || AUTO_LOGIN_FOR_TESTING,\r\n        });\r\n        setLoading(false);\r\n      } else {\r\n        setError(\"Invalid username or password\");\r\n        setLoading(false);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isLab: user?.hasLabAccess || user?.role === \"lab\",\r\n    isDoctor: user?.hasDoctorAccess || user?.role === \"doctor\",\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook for using auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}