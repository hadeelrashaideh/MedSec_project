{"ast":null,"code":"var _jsxFileName = \"C:\\\\perflogss\\\\folder\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { initializeDHAuth, clearDHCredentials } from \"../utils/diffieHellman\";\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tokens, setTokens] = useState({\n    access: localStorage.getItem(\"accessToken\"),\n    refresh: localStorage.getItem(\"refreshToken\")\n  });\n  const [dhCredentials, setDhCredentials] = useState(null);\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    const userRole = localStorage.getItem(\"userRole\");\n    const userEmail = localStorage.getItem(\"userEmail\");\n    const userId = localStorage.getItem(\"userId\");\n    if (accessToken && refreshToken && userRole && userEmail) {\n      console.log(\"Found stored auth data, restoring session\");\n      setUser({\n        email: userEmail,\n        role: userRole,\n        id: userId\n      });\n      setTokens({\n        access: accessToken,\n        refresh: refreshToken\n      });\n\n      // Initialize DH credentials if user is authenticated\n      initializeDHAuth().then(credentials => {\n        setDhCredentials(credentials);\n        console.log(\"DH authentication initialized\");\n      }).catch(err => {\n        console.error(\"Failed to initialize DH authentication:\", err);\n      });\n    }\n  }, []);\n\n  // Login function - connects to API\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    console.log(\"Login attempt with:\", email);\n    try {\n      console.log(\"Sending API request to:\", \"http://localhost:8000/api/auth/login/\");\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      console.log(\"API response status:\", response.status);\n      const data = await response.json();\n      console.log(\"API response data:\", data);\n      if (response.ok) {\n        console.log(\"Login successful, storing tokens and user data\");\n\n        // Ensure role is lowercase for consistent comparison\n        const userRole = data.role.toLowerCase();\n        console.log(\"Normalized user role:\", userRole);\n\n        // Store tokens and user data in localStorage\n        localStorage.setItem(\"accessToken\", data.access);\n        localStorage.setItem(\"refreshToken\", data.refresh);\n        localStorage.setItem(\"userRole\", userRole);\n        localStorage.setItem(\"userEmail\", data.email);\n        localStorage.setItem(\"userId\", data.user_id.toString());\n        console.log(\"Setting tokens in state\");\n        setTokens({\n          access: data.access,\n          refresh: data.refresh\n        });\n        console.log(\"Setting user in state, role:\", userRole);\n        setUser({\n          email: data.email,\n          role: userRole,\n          id: data.user_id\n        });\n\n        // Initialize Diffie-Hellman authentication\n        try {\n          const credentials = await initializeDHAuth();\n          setDhCredentials(credentials);\n          console.log(\"DH authentication initialized\");\n        } catch (dhError) {\n          console.error(\"Failed to initialize DH authentication:\", dhError);\n          // We continue even if DH auth fails, as JWT is still valid\n        }\n        setLoading(false);\n        return {\n          success: true,\n          role: userRole\n        };\n      } else {\n        console.log(\"Login failed:\", data.detail || \"Unknown error\");\n        setError(data.detail || \"Login failed\");\n        setLoading(false);\n        return {\n          success: false,\n          error: data.detail\n        };\n      }\n    } catch (err) {\n      console.error(\"Network error during login:\", err);\n      setError(\"Network error or server unavailable\");\n      setLoading(false);\n      return {\n        success: false,\n        error: \"Network error\"\n      };\n    }\n  };\n\n  // Refresh token function\n  const refreshToken = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/auth/token/refresh/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh: tokens.refresh\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem(\"accessToken\", data.access);\n        setTokens({\n          ...tokens,\n          access: data.access\n        });\n        return true;\n      } else {\n        // If refresh token is invalid, log out the user\n        logout();\n        return false;\n      }\n    } catch (err) {\n      console.error(\"Error refreshing token:\", err);\n      return false;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear JWT tokens\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    localStorage.removeItem(\"userRole\");\n    localStorage.removeItem(\"userEmail\");\n    localStorage.removeItem(\"userId\");\n\n    // Clear DH credentials on logout for security\n    // This ensures new keys will be generated on next login\n    console.log(\"Clearing Diffie-Hellman credentials for security\");\n    clearDHCredentials();\n    setDhCredentials(null);\n\n    // Reset user state\n    setUser(null);\n    setTokens({\n      access: null,\n      refresh: null\n    });\n    console.log(\"User logged out, all credentials cleared\");\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    refreshToken,\n    tokens,\n    dhCredentials,\n    isAuthenticated: !!user,\n    isLab: (user === null || user === void 0 ? void 0 : user.role) === \"lab\",\n    isDoctor: (user === null || user === void 0 ? void 0 : user.role) === \"doctor\"\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"+aGOZJA12Kg+DaBqPvnx/dU0LOI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","initializeDHAuth","clearDHCredentials","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","tokens","setTokens","access","localStorage","getItem","refresh","dhCredentials","setDhCredentials","accessToken","refreshToken","userRole","userEmail","userId","console","log","email","role","id","then","credentials","catch","err","login","password","response","fetch","method","headers","body","JSON","stringify","status","data","json","ok","toLowerCase","setItem","user_id","toString","dhError","success","detail","logout","removeItem","value","isAuthenticated","isLab","isDoctor","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { initializeDHAuth, clearDHCredentials } from \"../utils/diffieHellman\";\r\n\r\n// Create the auth context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [tokens, setTokens] = useState({\r\n    access: localStorage.getItem(\"accessToken\"),\r\n    refresh: localStorage.getItem(\"refreshToken\"),\r\n  });\r\n  const [dhCredentials, setDhCredentials] = useState(null);\r\n\r\n  // Check if user is already logged in\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    const refreshToken = localStorage.getItem(\"refreshToken\");\r\n    const userRole = localStorage.getItem(\"userRole\");\r\n    const userEmail = localStorage.getItem(\"userEmail\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n\r\n    if (accessToken && refreshToken && userRole && userEmail) {\r\n      console.log(\"Found stored auth data, restoring session\");\r\n      setUser({\r\n        email: userEmail,\r\n        role: userRole,\r\n        id: userId,\r\n      });\r\n      setTokens({\r\n        access: accessToken,\r\n        refresh: refreshToken,\r\n      });\r\n\r\n      // Initialize DH credentials if user is authenticated\r\n      initializeDHAuth()\r\n        .then((credentials) => {\r\n          setDhCredentials(credentials);\r\n          console.log(\"DH authentication initialized\");\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to initialize DH authentication:\", err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  // Login function - connects to API\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    console.log(\"Login attempt with:\", email);\r\n\r\n    try {\r\n      console.log(\r\n        \"Sending API request to:\",\r\n        \"http://localhost:8000/api/auth/login/\"\r\n      );\r\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      console.log(\"API response status:\", response.status);\r\n      const data = await response.json();\r\n      console.log(\"API response data:\", data);\r\n\r\n      if (response.ok) {\r\n        console.log(\"Login successful, storing tokens and user data\");\r\n\r\n        // Ensure role is lowercase for consistent comparison\r\n        const userRole = data.role.toLowerCase();\r\n        console.log(\"Normalized user role:\", userRole);\r\n\r\n        // Store tokens and user data in localStorage\r\n        localStorage.setItem(\"accessToken\", data.access);\r\n        localStorage.setItem(\"refreshToken\", data.refresh);\r\n        localStorage.setItem(\"userRole\", userRole);\r\n        localStorage.setItem(\"userEmail\", data.email);\r\n        localStorage.setItem(\"userId\", data.user_id.toString());\r\n\r\n        console.log(\"Setting tokens in state\");\r\n        setTokens({\r\n          access: data.access,\r\n          refresh: data.refresh,\r\n        });\r\n\r\n        console.log(\"Setting user in state, role:\", userRole);\r\n        setUser({\r\n          email: data.email,\r\n          role: userRole,\r\n          id: data.user_id,\r\n        });\r\n\r\n        // Initialize Diffie-Hellman authentication\r\n        try {\r\n          const credentials = await initializeDHAuth();\r\n          setDhCredentials(credentials);\r\n          console.log(\"DH authentication initialized\");\r\n        } catch (dhError) {\r\n          console.error(\"Failed to initialize DH authentication:\", dhError);\r\n          // We continue even if DH auth fails, as JWT is still valid\r\n        }\r\n\r\n        setLoading(false);\r\n        return { success: true, role: userRole };\r\n      } else {\r\n        console.log(\"Login failed:\", data.detail || \"Unknown error\");\r\n        setError(data.detail || \"Login failed\");\r\n        setLoading(false);\r\n        return { success: false, error: data.detail };\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Network error during login:\", err);\r\n      setError(\"Network error or server unavailable\");\r\n      setLoading(false);\r\n      return { success: false, error: \"Network error\" };\r\n    }\r\n  };\r\n\r\n  // Refresh token function\r\n  const refreshToken = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8000/api/auth/token/refresh/\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ refresh: tokens.refresh }),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        localStorage.setItem(\"accessToken\", data.access);\r\n        setTokens({\r\n          ...tokens,\r\n          access: data.access,\r\n        });\r\n        return true;\r\n      } else {\r\n        // If refresh token is invalid, log out the user\r\n        logout();\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error refreshing token:\", err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    // Clear JWT tokens\r\n    localStorage.removeItem(\"accessToken\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n    localStorage.removeItem(\"userRole\");\r\n    localStorage.removeItem(\"userEmail\");\r\n    localStorage.removeItem(\"userId\");\r\n\r\n    // Clear DH credentials on logout for security\r\n    // This ensures new keys will be generated on next login\r\n    console.log(\"Clearing Diffie-Hellman credentials for security\");\r\n    clearDHCredentials();\r\n    setDhCredentials(null);\r\n\r\n    // Reset user state\r\n    setUser(null);\r\n    setTokens({ access: null, refresh: null });\r\n\r\n    console.log(\"User logged out, all credentials cleared\");\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    refreshToken,\r\n    tokens,\r\n    dhCredentials,\r\n    isAuthenticated: !!user,\r\n    isLab: user?.role === \"lab\",\r\n    isDoctor: user?.role === \"doctor\",\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook for using auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}