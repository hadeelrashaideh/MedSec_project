{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\PatientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Create the patient context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientContext = /*#__PURE__*/createContext();\n\n// Sample initial patients (for demo)\nconst initialPatients = [{\n  id: \"P001\",\n  name: \"John Doe\",\n  age: 35,\n  image: null,\n  results: \"Normal blood count\"\n}, {\n  id: \"P002\",\n  name: \"Jane Smith\",\n  age: 42,\n  image: null,\n  results: \"Elevated glucose levels\"\n}];\n\n// Patient provider component\nexport const PatientProvider = ({\n  children\n}) => {\n  _s();\n  const [patients, setPatients] = useState(initialPatients);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Add new patient (simulated API call)\n  const addPatient = patientData => {\n    setLoading(true);\n    setError(null);\n\n    // Simulate API delay\n    setTimeout(() => {\n      try {\n        const newPatient = {\n          ...patientData,\n          id: `P${Math.floor(Math.random() * 1000).toString().padStart(3, \"0\")}`\n        };\n        setPatients([...patients, newPatient]);\n        setLoading(false);\n        return newPatient;\n      } catch (err) {\n        setError(\"Error adding patient\");\n        setLoading(false);\n        return null;\n      }\n    }, 1500);\n  };\n\n  // Search for patient by ID\n  const findPatientById = id => {\n    setLoading(true);\n\n    // Simulate search delay\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const patient = patients.find(p => p.id === id);\n        setLoading(false);\n        resolve(patient || null);\n      }, 1000);\n    });\n  };\n  const value = {\n    patients,\n    loading,\n    error,\n    addPatient,\n    findPatientById\n  };\n  return /*#__PURE__*/_jsxDEV(PatientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using patient context\n_s(PatientProvider, \"g7FzfyAZde/0m6polnZqvlQiVdU=\");\n_c = PatientProvider;\nexport const usePatients = () => {\n  _s2();\n  const context = useContext(PatientContext);\n  if (!context) {\n    throw new Error(\"usePatients must be used within a PatientProvider\");\n  }\n  return context;\n};\n_s2(usePatients, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","PatientContext","initialPatients","id","name","age","image","results","PatientProvider","children","_s","patients","setPatients","loading","setLoading","error","setError","addPatient","patientData","setTimeout","newPatient","Math","floor","random","toString","padStart","err","findPatientById","Promise","resolve","patient","find","p","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePatients","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/New folder (5)/medical-lab-system/src/context/PatientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\n// Create the patient context\r\nconst PatientContext = createContext();\r\n\r\n// Sample initial patients (for demo)\r\nconst initialPatients = [\r\n  {\r\n    id: \"P001\",\r\n    name: \"John Doe\",\r\n    age: 35,\r\n    image: null,\r\n    results: \"Normal blood count\",\r\n  },\r\n  {\r\n    id: \"P002\",\r\n    name: \"Jane Smith\",\r\n    age: 42,\r\n    image: null,\r\n    results: \"Elevated glucose levels\",\r\n  },\r\n];\r\n\r\n// Patient provider component\r\nexport const PatientProvider = ({ children }) => {\r\n  const [patients, setPatients] = useState(initialPatients);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Add new patient (simulated API call)\r\n  const addPatient = (patientData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    // Simulate API delay\r\n    setTimeout(() => {\r\n      try {\r\n        const newPatient = {\r\n          ...patientData,\r\n          id: `P${Math.floor(Math.random() * 1000)\r\n            .toString()\r\n            .padStart(3, \"0\")}`,\r\n        };\r\n\r\n        setPatients([...patients, newPatient]);\r\n        setLoading(false);\r\n        return newPatient;\r\n      } catch (err) {\r\n        setError(\"Error adding patient\");\r\n        setLoading(false);\r\n        return null;\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  // Search for patient by ID\r\n  const findPatientById = (id) => {\r\n    setLoading(true);\r\n\r\n    // Simulate search delay\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const patient = patients.find((p) => p.id === id);\r\n        setLoading(false);\r\n        resolve(patient || null);\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  const value = {\r\n    patients,\r\n    loading,\r\n    error,\r\n    addPatient,\r\n    findPatientById,\r\n  };\r\n\r\n  return (\r\n    <PatientContext.Provider value={value}>{children}</PatientContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using patient context\r\nexport const usePatients = () => {\r\n  const context = useContext(PatientContext);\r\n  if (!context) {\r\n    throw new Error(\"usePatients must be used within a PatientProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}