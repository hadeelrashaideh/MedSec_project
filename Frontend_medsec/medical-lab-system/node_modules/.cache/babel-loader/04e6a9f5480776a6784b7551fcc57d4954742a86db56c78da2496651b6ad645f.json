{"ast":null,"code":"var _jsxFileName = \"C:\\\\perflogss\\\\folder\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\PatientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { useAuth } from \"./AuthContext\";\n\n// Create the patient context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientContext = /*#__PURE__*/createContext();\n\n// Patient provider component\nexport const PatientProvider = ({\n  children\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    tokens,\n    refreshToken\n  } = useAuth();\n\n  // Helper function to handle API requests with token refresh\n  const apiRequest = async (url, method, body = null, isFormData = false) => {\n    setLoading(true);\n    setError(null);\n    try {\n      let headers = {\n        Authorization: `Bearer ${tokens.access}`\n      };\n      if (!isFormData) {\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n      const requestOptions = {\n        method,\n        headers,\n        body: isFormData ? body : body ? JSON.stringify(body) : null\n      };\n      let response = await fetch(url, requestOptions);\n\n      // If token expired, try to refresh it\n      if (response.status === 401) {\n        const refreshed = await refreshToken();\n        if (refreshed) {\n          // Update headers with new token\n          headers.Authorization = `Bearer ${localStorage.getItem(\"accessToken\")}`;\n          // Retry the request\n          response = await fetch(url, {\n            ...requestOptions,\n            headers\n          });\n        }\n      }\n      const data = await response.json();\n      console.log(\"data /////////////\", data);\n      setLoading(false);\n      if (!response.ok) {\n        setError(data.detail || \"Operation failed\");\n        return {\n          success: false,\n          error: data.detail || \"Operation failed\"\n        };\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (err) {\n      setLoading(false);\n      setError(\"Network error or server unavailable\");\n      return {\n        success: false,\n        error: \"Network error\"\n      };\n    }\n  };\n\n  // Add new patient\n  const addPatient = async patientData => {\n    const formData = new FormData();\n    formData.append(\"id\", patientData.id);\n    formData.append(\"name\", patientData.name);\n    formData.append(\"age\", patientData.age);\n\n    // Handle notes field (optional)\n    if (patientData.notes) {\n      formData.append(\"note\", patientData.notes);\n    }\n\n    // Handle image if available\n    if (patientData.image) {\n      formData.append(\"image\", patientData.image);\n    }\n    const result = await apiRequest(\"http://localhost:8000/patients/\", \"POST\", formData, true);\n    return result.success ? result.data : null;\n  };\n\n  // Search for patient by ID\n  const findPatientById = async id => {\n    const result = await apiRequest(`http://localhost:8000/api/patients/${id}/`, \"GET\");\n    return result.success ? result.data : null;\n  };\n  const value = {\n    loading,\n    error,\n    addPatient,\n    findPatientById\n  };\n  return /*#__PURE__*/_jsxDEV(PatientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using patient context\n_s(PatientProvider, \"bX3q73xIUrr1nLsyh9sp3ZKlq7U=\", false, function () {\n  return [useAuth];\n});\n_c = PatientProvider;\nexport const usePatients = () => {\n  _s2();\n  const context = useContext(PatientContext);\n  if (!context) {\n    throw new Error(\"usePatients must be used within a PatientProvider\");\n  }\n  return context;\n};\n_s2(usePatients, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useAuth","jsxDEV","_jsxDEV","PatientContext","PatientProvider","children","_s","loading","setLoading","error","setError","tokens","refreshToken","apiRequest","url","method","body","isFormData","headers","Authorization","access","requestOptions","JSON","stringify","response","fetch","status","refreshed","localStorage","getItem","data","json","console","log","ok","detail","success","err","addPatient","patientData","formData","FormData","append","id","name","age","notes","image","result","findPatientById","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePatients","_s2","context","Error","$RefreshReg$"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/context/PatientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { useAuth } from \"./AuthContext\";\r\n\r\n// Create the patient context\r\nconst PatientContext = createContext();\r\n\r\n// Patient provider component\r\nexport const PatientProvider = ({ children }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { tokens, refreshToken } = useAuth();\r\n\r\n  // Helper function to handle API requests with token refresh\r\n  const apiRequest = async (url, method, body = null, isFormData = false) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      let headers = {\r\n        Authorization: `Bearer ${tokens.access}`,\r\n      };\r\n\r\n      if (!isFormData) {\r\n        headers[\"Content-Type\"] = \"application/json\";\r\n      }\r\n\r\n      const requestOptions = {\r\n        method,\r\n        headers,\r\n        body: isFormData ? body : body ? JSON.stringify(body) : null,\r\n      };\r\n\r\n      let response = await fetch(url, requestOptions);\r\n\r\n      // If token expired, try to refresh it\r\n      if (response.status === 401) {\r\n        const refreshed = await refreshToken();\r\n        if (refreshed) {\r\n          // Update headers with new token\r\n          headers.Authorization = `Bearer ${localStorage.getItem(\r\n            \"accessToken\"\r\n          )}`;\r\n          // Retry the request\r\n          response = await fetch(url, {\r\n            ...requestOptions,\r\n            headers,\r\n          });\r\n        }\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"data /////////////\", data);\r\n      setLoading(false);\r\n\r\n      if (!response.ok) {\r\n        setError(data.detail || \"Operation failed\");\r\n        return { success: false, error: data.detail || \"Operation failed\" };\r\n      }\r\n\r\n      return { success: true, data };\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(\"Network error or server unavailable\");\r\n      return { success: false, error: \"Network error\" };\r\n    }\r\n  };\r\n\r\n  // Add new patient\r\n  const addPatient = async (patientData) => {\r\n    const formData = new FormData();\r\n    formData.append(\"id\", patientData.id);\r\n    formData.append(\"name\", patientData.name);\r\n    formData.append(\"age\", patientData.age);\r\n\r\n    // Handle notes field (optional)\r\n    if (patientData.notes) {\r\n      formData.append(\"note\", patientData.notes);\r\n    }\r\n\r\n    // Handle image if available\r\n    if (patientData.image) {\r\n      formData.append(\"image\", patientData.image);\r\n    }\r\n\r\n    const result = await apiRequest(\r\n      \"http://localhost:8000/patients/\",\r\n      \"POST\",\r\n      formData,\r\n      true\r\n    );\r\n\r\n    return result.success ? result.data : null;\r\n  };\r\n\r\n  // Search for patient by ID\r\n  const findPatientById = async (id) => {\r\n    const result = await apiRequest(\r\n      `http://localhost:8000/api/patients/${id}/`,\r\n      \"GET\"\r\n    );\r\n\r\n    return result.success ? result.data : null;\r\n  };\r\n\r\n  const value = {\r\n    loading,\r\n    error,\r\n    addPatient,\r\n    findPatientById,\r\n  };\r\n\r\n  return (\r\n    <PatientContext.Provider value={value}>{children}</PatientContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using patient context\r\nexport const usePatients = () => {\r\n  const context = useContext(PatientContext);\r\n  if (!context) {\r\n    throw new Error(\"usePatients must be used within a PatientProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}