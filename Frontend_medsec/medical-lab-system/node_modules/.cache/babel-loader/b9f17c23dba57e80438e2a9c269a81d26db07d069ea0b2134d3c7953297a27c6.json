{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\PatientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Create the patient context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientContext = /*#__PURE__*/createContext();\n\n// Sample initial patients (for demo)\nconst initialPatients = [{\n  id: \"P001\",\n  name: \"John Doe\",\n  age: 35,\n  gender: \"Male\",\n  contactNumber: \"555-123-4567\",\n  email: \"john.doe@example.com\",\n  image: null,\n  results: \"Normal blood count. Cholesterol within normal range.\"\n}, {\n  id: \"P002\",\n  name: \"Jane Smith\",\n  age: 42,\n  gender: \"Female\",\n  contactNumber: \"555-987-6543\",\n  email: \"jane.smith@example.com\",\n  image: null,\n  results: \"Elevated glucose levels. Recommended follow-up in 3 months.\"\n}];\n\n// Store patients in session storage to persist between page refreshes\nconst getStoredPatients = () => {\n  try {\n    const storedPatients = sessionStorage.getItem(\"patients\");\n    return storedPatients ? JSON.parse(storedPatients) : initialPatients;\n  } catch (error) {\n    console.error(\"Error retrieving patients from session storage:\", error);\n    return initialPatients;\n  }\n};\n\n// Patient provider component\nexport const PatientProvider = ({\n  children\n}) => {\n  _s();\n  const [patients, setPatients] = useState(getStoredPatients());\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [lastAddedPatient, setLastAddedPatient] = useState(null);\n\n  // Save patients to session storage whenever they change\n  React.useEffect(() => {\n    try {\n      sessionStorage.setItem(\"patients\", JSON.stringify(patients));\n    } catch (error) {\n      console.error(\"Error saving patients to session storage:\", error);\n    }\n  }, [patients]);\n\n  // Add new patient (simulated API call)\n  const addPatient = patientData => {\n    return new Promise(resolve => {\n      setLoading(true);\n      setError(null);\n\n      // Simulate API delay\n      setTimeout(() => {\n        try {\n          // Use provided ID if available, otherwise generate one\n          const patientId = patientData.id || `P${Math.floor(Math.random() * 1000).toString().padStart(3, \"0\")}`;\n          const newPatient = {\n            ...patientData,\n            id: patientId\n          };\n          setPatients(prevPatients => {\n            // Check if ID already exists, if so, update instead of adding\n            const exists = prevPatients.findIndex(p => p.id === patientId);\n            if (exists >= 0) {\n              const updatedPatients = [...prevPatients];\n              updatedPatients[exists] = newPatient;\n              return updatedPatients;\n            } else {\n              return [...prevPatients, newPatient];\n            }\n          });\n          setLastAddedPatient(newPatient);\n          setLoading(false);\n          resolve(newPatient);\n        } catch (err) {\n          setError(\"Error adding patient\");\n          setLoading(false);\n          resolve(null);\n        }\n      }, 1000);\n    });\n  };\n\n  // Search for patient by ID\n  const findPatientById = id => {\n    return new Promise(resolve => {\n      setLoading(true);\n\n      // Simulate search delay\n      setTimeout(() => {\n        const patient = patients.find(p => p.id.toLowerCase() === id.toLowerCase());\n        setLoading(false);\n        resolve(patient || null);\n      }, 800);\n    });\n  };\n\n  // Clear last added patient (for demo purposes)\n  const clearLastAddedPatient = () => {\n    setLastAddedPatient(null);\n  };\n  const value = {\n    patients,\n    loading,\n    error,\n    addPatient,\n    findPatientById,\n    lastAddedPatient,\n    clearLastAddedPatient\n  };\n  return /*#__PURE__*/_jsxDEV(PatientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using patient context\n_s(PatientProvider, \"zLLb1tnHDl2KcONpX6nq4wdVhwA=\");\n_c = PatientProvider;\nexport const usePatients = () => {\n  _s2();\n  const context = useContext(PatientContext);\n  if (!context) {\n    throw new Error(\"usePatients must be used within a PatientProvider\");\n  }\n  return context;\n};\n_s2(usePatients, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","PatientContext","initialPatients","id","name","age","gender","contactNumber","email","image","results","getStoredPatients","storedPatients","sessionStorage","getItem","JSON","parse","error","console","PatientProvider","children","_s","patients","setPatients","loading","setLoading","setError","lastAddedPatient","setLastAddedPatient","useEffect","setItem","stringify","addPatient","patientData","Promise","resolve","setTimeout","patientId","Math","floor","random","toString","padStart","newPatient","prevPatients","exists","findIndex","p","updatedPatients","err","findPatientById","patient","find","toLowerCase","clearLastAddedPatient","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePatients","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/New folder (5)/medical-lab-system/src/context/PatientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\n// Create the patient context\r\nconst PatientContext = createContext();\r\n\r\n// Sample initial patients (for demo)\r\nconst initialPatients = [\r\n  {\r\n    id: \"P001\",\r\n    name: \"John Doe\",\r\n    age: 35,\r\n    gender: \"Male\",\r\n    contactNumber: \"555-123-4567\",\r\n    email: \"john.doe@example.com\",\r\n    image: null,\r\n    results: \"Normal blood count. Cholesterol within normal range.\",\r\n  },\r\n  {\r\n    id: \"P002\",\r\n    name: \"Jane Smith\",\r\n    age: 42,\r\n    gender: \"Female\",\r\n    contactNumber: \"555-987-6543\",\r\n    email: \"jane.smith@example.com\",\r\n    image: null,\r\n    results: \"Elevated glucose levels. Recommended follow-up in 3 months.\",\r\n  },\r\n];\r\n\r\n// Store patients in session storage to persist between page refreshes\r\nconst getStoredPatients = () => {\r\n  try {\r\n    const storedPatients = sessionStorage.getItem(\"patients\");\r\n    return storedPatients ? JSON.parse(storedPatients) : initialPatients;\r\n  } catch (error) {\r\n    console.error(\"Error retrieving patients from session storage:\", error);\r\n    return initialPatients;\r\n  }\r\n};\r\n\r\n// Patient provider component\r\nexport const PatientProvider = ({ children }) => {\r\n  const [patients, setPatients] = useState(getStoredPatients());\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [lastAddedPatient, setLastAddedPatient] = useState(null);\r\n\r\n  // Save patients to session storage whenever they change\r\n  React.useEffect(() => {\r\n    try {\r\n      sessionStorage.setItem(\"patients\", JSON.stringify(patients));\r\n    } catch (error) {\r\n      console.error(\"Error saving patients to session storage:\", error);\r\n    }\r\n  }, [patients]);\r\n\r\n  // Add new patient (simulated API call)\r\n  const addPatient = (patientData) => {\r\n    return new Promise((resolve) => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Simulate API delay\r\n      setTimeout(() => {\r\n        try {\r\n          // Use provided ID if available, otherwise generate one\r\n          const patientId =\r\n            patientData.id ||\r\n            `P${Math.floor(Math.random() * 1000)\r\n              .toString()\r\n              .padStart(3, \"0\")}`;\r\n\r\n          const newPatient = {\r\n            ...patientData,\r\n            id: patientId,\r\n          };\r\n\r\n          setPatients((prevPatients) => {\r\n            // Check if ID already exists, if so, update instead of adding\r\n            const exists = prevPatients.findIndex((p) => p.id === patientId);\r\n            if (exists >= 0) {\r\n              const updatedPatients = [...prevPatients];\r\n              updatedPatients[exists] = newPatient;\r\n              return updatedPatients;\r\n            } else {\r\n              return [...prevPatients, newPatient];\r\n            }\r\n          });\r\n          setLastAddedPatient(newPatient);\r\n          setLoading(false);\r\n          resolve(newPatient);\r\n        } catch (err) {\r\n          setError(\"Error adding patient\");\r\n          setLoading(false);\r\n          resolve(null);\r\n        }\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  // Search for patient by ID\r\n  const findPatientById = (id) => {\r\n    return new Promise((resolve) => {\r\n      setLoading(true);\r\n\r\n      // Simulate search delay\r\n      setTimeout(() => {\r\n        const patient = patients.find(\r\n          (p) => p.id.toLowerCase() === id.toLowerCase()\r\n        );\r\n        setLoading(false);\r\n        resolve(patient || null);\r\n      }, 800);\r\n    });\r\n  };\r\n\r\n  // Clear last added patient (for demo purposes)\r\n  const clearLastAddedPatient = () => {\r\n    setLastAddedPatient(null);\r\n  };\r\n\r\n  const value = {\r\n    patients,\r\n    loading,\r\n    error,\r\n    addPatient,\r\n    findPatientById,\r\n    lastAddedPatient,\r\n    clearLastAddedPatient,\r\n  };\r\n\r\n  return (\r\n    <PatientContext.Provider value={value}>{children}</PatientContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using patient context\r\nexport const usePatients = () => {\r\n  const context = useContext(PatientContext);\r\n  if (!context) {\r\n    throw new Error(\"usePatients must be used within a PatientProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}