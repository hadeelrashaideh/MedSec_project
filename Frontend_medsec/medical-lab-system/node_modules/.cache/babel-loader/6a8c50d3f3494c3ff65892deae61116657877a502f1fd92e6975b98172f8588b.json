{"ast":null,"code":"var _jsxFileName = \"C:\\\\perflogss\\\\folder\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tokens, setTokens] = useState({\n    access: localStorage.getItem(\"accessToken\"),\n    refresh: localStorage.getItem(\"refreshToken\")\n  });\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    const userRole = localStorage.getItem(\"userRole\");\n    const userEmail = localStorage.getItem(\"userEmail\");\n    if (accessToken && refreshToken && userRole && userEmail) {\n      setUser({\n        email: userEmail,\n        role: userRole.toLowerCase()\n      });\n      setTokens({\n        access: accessToken,\n        refresh: refreshToken\n      });\n    }\n  }, []);\n\n  // Login function - connects to API\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Store tokens in localStorage\n        localStorage.setItem(\"accessToken\", data.access);\n        localStorage.setItem(\"refreshToken\", data.refresh);\n        localStorage.setItem(\"userRole\", data.user.role.toLowerCase());\n        localStorage.setItem(\"userEmail\", data.user.email);\n        setTokens({\n          access: data.access,\n          refresh: data.refresh\n        });\n        setUser({\n          email: data.user.email,\n          role: data.user.role.toLowerCase()\n        });\n        setLoading(false);\n        return {\n          success: true\n        };\n      } else {\n        setError(data.detail || \"Login failed\");\n        setLoading(false);\n        return {\n          success: false,\n          error: data.detail\n        };\n      }\n    } catch (err) {\n      setError(\"Network error or server unavailable\");\n      setLoading(false);\n      return {\n        success: false,\n        error: \"Network error\"\n      };\n    }\n  };\n\n  // Refresh token function\n  const refreshToken = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/api/auth/token/refresh/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh: tokens.refresh\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem(\"accessToken\", data.access);\n        setTokens({\n          ...tokens,\n          access: data.access\n        });\n        return true;\n      } else {\n        // If refresh token is invalid, log out the user\n        logout();\n        return false;\n      }\n    } catch (err) {\n      console.error(\"Error refreshing token:\", err);\n      return false;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    localStorage.removeItem(\"userRole\");\n    localStorage.removeItem(\"userEmail\");\n    setUser(null);\n    setTokens({\n      access: null,\n      refresh: null\n    });\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    refreshToken,\n    tokens,\n    isAuthenticated: !!user,\n    isLab: (user === null || user === void 0 ? void 0 : user.role) === \"lab\",\n    isDoctor: (user === null || user === void 0 ? void 0 : user.role) === \"doctor\"\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"6kiURjmV258l3d9n029JAYSlMjE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","tokens","setTokens","access","localStorage","getItem","refresh","accessToken","refreshToken","userRole","userEmail","email","role","toLowerCase","login","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","setItem","success","detail","err","logout","console","removeItem","value","isAuthenticated","isLab","isDoctor","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// Create the auth context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [tokens, setTokens] = useState({\r\n    access: localStorage.getItem(\"accessToken\"),\r\n    refresh: localStorage.getItem(\"refreshToken\"),\r\n  });\r\n\r\n  // Check if user is already logged in\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    const refreshToken = localStorage.getItem(\"refreshToken\");\r\n    const userRole = localStorage.getItem(\"userRole\");\r\n    const userEmail = localStorage.getItem(\"userEmail\");\r\n\r\n    if (accessToken && refreshToken && userRole && userEmail) {\r\n      setUser({\r\n        email: userEmail,\r\n        role: userRole.toLowerCase(),\r\n      });\r\n      setTokens({\r\n        access: accessToken,\r\n        refresh: refreshToken,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // Login function - connects to API\r\n  const login = async (email, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Store tokens in localStorage\r\n        localStorage.setItem(\"accessToken\", data.access);\r\n        localStorage.setItem(\"refreshToken\", data.refresh);\r\n        localStorage.setItem(\"userRole\", data.user.role.toLowerCase());\r\n        localStorage.setItem(\"userEmail\", data.user.email);\r\n\r\n        setTokens({\r\n          access: data.access,\r\n          refresh: data.refresh,\r\n        });\r\n\r\n        setUser({\r\n          email: data.user.email,\r\n          role: data.user.role.toLowerCase(),\r\n        });\r\n\r\n        setLoading(false);\r\n        return { success: true };\r\n      } else {\r\n        setError(data.detail || \"Login failed\");\r\n        setLoading(false);\r\n        return { success: false, error: data.detail };\r\n      }\r\n    } catch (err) {\r\n      setError(\"Network error or server unavailable\");\r\n      setLoading(false);\r\n      return { success: false, error: \"Network error\" };\r\n    }\r\n  };\r\n\r\n  // Refresh token function\r\n  const refreshToken = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8000/api/auth/token/refresh/\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ refresh: tokens.refresh }),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        localStorage.setItem(\"accessToken\", data.access);\r\n        setTokens({\r\n          ...tokens,\r\n          access: data.access,\r\n        });\r\n        return true;\r\n      } else {\r\n        // If refresh token is invalid, log out the user\r\n        logout();\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error refreshing token:\", err);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem(\"accessToken\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n    localStorage.removeItem(\"userRole\");\r\n    localStorage.removeItem(\"userEmail\");\r\n    setUser(null);\r\n    setTokens({ access: null, refresh: null });\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    refreshToken,\r\n    tokens,\r\n    isAuthenticated: !!user,\r\n    isLab: user?.role === \"lab\",\r\n    isDoctor: user?.role === \"doctor\",\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook for using auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}