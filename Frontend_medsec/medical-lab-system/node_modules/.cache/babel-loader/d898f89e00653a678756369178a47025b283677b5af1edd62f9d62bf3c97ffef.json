{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Login function (simulated)\n  const login = (username, password, role) => {\n    setLoading(true);\n    setError(null);\n\n    // Simulate API call\n    setTimeout(() => {\n      // For demonstration purposes only\n      if (username && password) {\n        setUser({\n          id: \"user123\",\n          username,\n          role: role // 'lab' or 'doctor'\n        });\n        setLoading(false);\n      } else {\n        setError(\"Invalid username or password\");\n        setLoading(false);\n      }\n    }, 1000);\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated: !!user,\n    isLab: (user === null || user === void 0 ? void 0 : user.role) === \"lab\",\n    isDoctor: (user === null || user === void 0 ? void 0 : user.role) === \"doctor\"\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"wJbgydKmzProwqZ2PuaEI7aaFyo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","login","username","password","role","setTimeout","id","logout","value","isAuthenticated","isLab","isDoctor","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/New folder (5)/medical-lab-system/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\n// Create the auth context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Login function (simulated)\r\n  const login = (username, password, role) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      // For demonstration purposes only\r\n      if (username && password) {\r\n        setUser({\r\n          id: \"user123\",\r\n          username,\r\n          role: role, // 'lab' or 'doctor'\r\n        });\r\n        setLoading(false);\r\n      } else {\r\n        setError(\"Invalid username or password\");\r\n        setLoading(false);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isLab: user?.role === \"lab\",\r\n    isDoctor: user?.role === \"doctor\",\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook for using auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMa,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,KAAK;IAC1CN,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACAK,UAAU,CAAC,MAAM;MACf;MACA,IAAIH,QAAQ,IAAIC,QAAQ,EAAE;QACxBP,OAAO,CAAC;UACNU,EAAE,EAAE,SAAS;UACbJ,QAAQ;UACRE,IAAI,EAAEA,IAAI,CAAE;QACd,CAAC,CAAC;QACFN,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,MAAM;QACLE,QAAQ,CAAC,8BAA8B,CAAC;QACxCF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAED;EACA,MAAMS,MAAM,GAAGA,CAAA,KAAM;IACnBX,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,MAAMY,KAAK,GAAG;IACZb,IAAI;IACJE,OAAO;IACPE,KAAK;IACLE,KAAK;IACLM,MAAM;IACNE,eAAe,EAAE,CAAC,CAACd,IAAI;IACvBe,KAAK,EAAE,CAAAf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,IAAI,MAAK,KAAK;IAC3BO,QAAQ,EAAE,CAAAhB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,IAAI,MAAK;EAC3B,CAAC;EAED,oBAAOd,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACJ,KAAK,EAAEA,KAAM;IAAAf,QAAA,EAAEA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAC9E,CAAC;;AAED;AAAAtB,EAAA,CA9CaF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AA+CzB,OAAO,MAAM0B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGjC,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAAC6B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}