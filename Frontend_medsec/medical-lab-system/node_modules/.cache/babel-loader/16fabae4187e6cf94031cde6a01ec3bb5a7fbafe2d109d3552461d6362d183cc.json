{"ast":null,"code":"var _jsxFileName = \"C:\\\\perflogss\\\\folder\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { initializeKeyExchange, completeKeyExchange, setupKeyRefresh } from \"../services/cryptoService\";\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [tokens, setTokens] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [encryptionStatus, setEncryptionStatus] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Helper to normalize role\n  const normalizeRole = role => {\n    if (!role) return \"\";\n    // Convert any role format to lowercase \"lab\" or \"doctor\"\n    const normalizedRole = role.toLowerCase().trim();\n    console.log(`Normalized role: ${role} → ${normalizedRole}`);\n    return normalizedRole;\n  };\n\n  // Initialize tokens from localStorage on component mount\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const refreshTkn = localStorage.getItem(\"refreshToken\");\n    if (accessToken && refreshTkn) {\n      setTokens({\n        access: accessToken,\n        refresh: refreshTkn\n      });\n\n      // Try to restore user data from localStorage\n      const storedRole = localStorage.getItem(\"userRole\");\n      const storedUserId = localStorage.getItem(\"userId\");\n      const storedEmail = localStorage.getItem(\"userEmail\");\n      if (storedRole && storedUserId) {\n        console.log(\"Restoring user session with role:\", storedRole);\n        setUser({\n          username: storedEmail,\n          email: storedEmail,\n          role: normalizeRole(storedRole),\n          id: storedUserId\n        });\n        setIsAuthenticated(true);\n      }\n\n      // Check if encryption is established\n      if (sessionStorage.getItem(\"encryption_established\") === \"true\") {\n        setEncryptionStatus(true);\n      }\n    }\n\n    // Set up periodic key refresh\n    const cleanupKeyRefresh = setupKeyRefresh(60); // Refresh every 60 minutes\n\n    return () => {\n      cleanupKeyRefresh();\n    };\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log(\"Sending login request with email:\", email);\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      console.log(\"Login response:\", data);\n      if (!response.ok) {\n        throw new Error(data.detail || \"Login failed\");\n      }\n\n      // Validate role data\n      if (!data.role) {\n        console.error(\"No role received from API:\", data);\n        throw new Error(\"Invalid user data received: missing role\");\n      }\n      const normalizedRole = normalizeRole(data.role);\n      console.log(`User role from API: ${data.role} (normalized: ${normalizedRole})`);\n\n      // Save tokens to state and localStorage\n      setTokens({\n        access: data.access,\n        refresh: data.refresh\n      });\n      localStorage.setItem(\"accessToken\", data.access);\n      localStorage.setItem(\"refreshToken\", data.refresh);\n\n      // Store user data in localStorage for persistence\n      localStorage.setItem(\"userRole\", normalizedRole);\n      localStorage.setItem(\"userId\", data.user_id);\n      localStorage.setItem(\"userEmail\", data.email || email);\n\n      // Set user data in state\n      setUser({\n        username: data.username || data.email || email,\n        email: data.email || email,\n        role: normalizedRole,\n        id: data.user_id\n      });\n\n      // Update authentication state\n      setIsAuthenticated(true);\n\n      // Perform key exchange after successful login\n      try {\n        // Step 1: Initialize key exchange\n        const dhParams = await initializeKeyExchange(data.access);\n\n        // Step 2: Complete key exchange\n        await completeKeyExchange(data.access, dhParams);\n\n        // Update encryption status\n        setEncryptionStatus(true);\n      } catch (encryptionError) {\n        console.warn(\"Encryption key exchange failed, using default encryption:\", encryptionError);\n        setEncryptionStatus(false);\n      }\n      setLoading(false);\n      return {\n        ...data,\n        role: normalizedRole\n      };\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      setError(err.message);\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    localStorage.removeItem(\"userRole\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"userEmail\");\n    sessionStorage.removeItem(\"encryption_established\");\n    setTokens(null);\n    setUser(null);\n    setIsAuthenticated(false);\n    setEncryptionStatus(false);\n  };\n\n  // Token refresh function\n  const refreshToken = async () => {\n    if (!(tokens !== null && tokens !== void 0 && tokens.refresh)) return false;\n    try {\n      const response = await fetch(\"http://localhost:8000/api/auth/token/refresh/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh: tokens.refresh\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Clear tokens if refresh fails\n        logout();\n        return false;\n      }\n\n      // Update tokens\n      const newTokens = {\n        ...tokens,\n        access: data.access\n      };\n      setTokens(newTokens);\n      localStorage.setItem(\"accessToken\", data.access);\n\n      // Refresh encryption key\n      try {\n        const dhParams = await initializeKeyExchange(data.access);\n        await completeKeyExchange(data.access, dhParams);\n        setEncryptionStatus(true);\n      } catch (encryptionError) {\n        console.warn(\"Failed to refresh encryption key:\", encryptionError);\n      }\n      return true;\n    } catch (err) {\n      console.error(\"Token refresh error:\", err);\n      logout();\n      return false;\n    }\n  };\n  const value = {\n    tokens,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    refreshToken,\n    encryptionStatus,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"4M1pyYRMZRrpqV/MV3O3hKMm2zo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","initializeKeyExchange","completeKeyExchange","setupKeyRefresh","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","tokens","setTokens","user","setUser","loading","setLoading","error","setError","encryptionStatus","setEncryptionStatus","isAuthenticated","setIsAuthenticated","normalizeRole","role","normalizedRole","toLowerCase","trim","console","log","accessToken","localStorage","getItem","refreshTkn","access","refresh","storedRole","storedUserId","storedEmail","username","email","id","sessionStorage","cleanupKeyRefresh","login","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","detail","setItem","user_id","dhParams","encryptionError","warn","err","message","logout","removeItem","refreshToken","newTokens","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport {\n  initializeKeyExchange,\n  completeKeyExchange,\n  setupKeyRefresh,\n} from \"../services/cryptoService\";\n\n// Create auth context\nconst AuthContext = createContext();\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [tokens, setTokens] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [encryptionStatus, setEncryptionStatus] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Helper to normalize role\n  const normalizeRole = (role) => {\n    if (!role) return \"\";\n    // Convert any role format to lowercase \"lab\" or \"doctor\"\n    const normalizedRole = role.toLowerCase().trim();\n    console.log(`Normalized role: ${role} → ${normalizedRole}`);\n    return normalizedRole;\n  };\n\n  // Initialize tokens from localStorage on component mount\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const refreshTkn = localStorage.getItem(\"refreshToken\");\n\n    if (accessToken && refreshTkn) {\n      setTokens({\n        access: accessToken,\n        refresh: refreshTkn,\n      });\n\n      // Try to restore user data from localStorage\n      const storedRole = localStorage.getItem(\"userRole\");\n      const storedUserId = localStorage.getItem(\"userId\");\n      const storedEmail = localStorage.getItem(\"userEmail\");\n\n      if (storedRole && storedUserId) {\n        console.log(\"Restoring user session with role:\", storedRole);\n        setUser({\n          username: storedEmail,\n          email: storedEmail,\n          role: normalizeRole(storedRole),\n          id: storedUserId,\n        });\n        setIsAuthenticated(true);\n      }\n\n      // Check if encryption is established\n      if (sessionStorage.getItem(\"encryption_established\") === \"true\") {\n        setEncryptionStatus(true);\n      }\n    }\n\n    // Set up periodic key refresh\n    const cleanupKeyRefresh = setupKeyRefresh(60); // Refresh every 60 minutes\n\n    return () => {\n      cleanupKeyRefresh();\n    };\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      console.log(\"Sending login request with email:\", email);\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n      console.log(\"Login response:\", data);\n\n      if (!response.ok) {\n        throw new Error(data.detail || \"Login failed\");\n      }\n\n      // Validate role data\n      if (!data.role) {\n        console.error(\"No role received from API:\", data);\n        throw new Error(\"Invalid user data received: missing role\");\n      }\n\n      const normalizedRole = normalizeRole(data.role);\n      console.log(\n        `User role from API: ${data.role} (normalized: ${normalizedRole})`\n      );\n\n      // Save tokens to state and localStorage\n      setTokens({\n        access: data.access,\n        refresh: data.refresh,\n      });\n\n      localStorage.setItem(\"accessToken\", data.access);\n      localStorage.setItem(\"refreshToken\", data.refresh);\n\n      // Store user data in localStorage for persistence\n      localStorage.setItem(\"userRole\", normalizedRole);\n      localStorage.setItem(\"userId\", data.user_id);\n      localStorage.setItem(\"userEmail\", data.email || email);\n\n      // Set user data in state\n      setUser({\n        username: data.username || data.email || email,\n        email: data.email || email,\n        role: normalizedRole,\n        id: data.user_id,\n      });\n\n      // Update authentication state\n      setIsAuthenticated(true);\n\n      // Perform key exchange after successful login\n      try {\n        // Step 1: Initialize key exchange\n        const dhParams = await initializeKeyExchange(data.access);\n\n        // Step 2: Complete key exchange\n        await completeKeyExchange(data.access, dhParams);\n\n        // Update encryption status\n        setEncryptionStatus(true);\n      } catch (encryptionError) {\n        console.warn(\n          \"Encryption key exchange failed, using default encryption:\",\n          encryptionError\n        );\n        setEncryptionStatus(false);\n      }\n\n      setLoading(false);\n      return {\n        ...data,\n        role: normalizedRole,\n      };\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      setError(err.message);\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    localStorage.removeItem(\"userRole\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"userEmail\");\n    sessionStorage.removeItem(\"encryption_established\");\n    setTokens(null);\n    setUser(null);\n    setIsAuthenticated(false);\n    setEncryptionStatus(false);\n  };\n\n  // Token refresh function\n  const refreshToken = async () => {\n    if (!tokens?.refresh) return false;\n\n    try {\n      const response = await fetch(\n        \"http://localhost:8000/api/auth/token/refresh/\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ refresh: tokens.refresh }),\n        }\n      );\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Clear tokens if refresh fails\n        logout();\n        return false;\n      }\n\n      // Update tokens\n      const newTokens = {\n        ...tokens,\n        access: data.access,\n      };\n\n      setTokens(newTokens);\n      localStorage.setItem(\"accessToken\", data.access);\n\n      // Refresh encryption key\n      try {\n        const dhParams = await initializeKeyExchange(data.access);\n        await completeKeyExchange(data.access, dhParams);\n        setEncryptionStatus(true);\n      } catch (encryptionError) {\n        console.warn(\"Failed to refresh encryption key:\", encryptionError);\n      }\n\n      return true;\n    } catch (err) {\n      console.error(\"Token refresh error:\", err);\n      logout();\n      return false;\n    }\n  };\n\n  const value = {\n    tokens,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    refreshToken,\n    encryptionStatus,\n    isAuthenticated,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// Custom hook for using auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}