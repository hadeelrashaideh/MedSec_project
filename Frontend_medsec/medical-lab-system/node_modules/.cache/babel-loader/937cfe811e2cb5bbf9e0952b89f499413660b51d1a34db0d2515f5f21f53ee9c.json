{"ast":null,"code":"var _jsxFileName = \"C:\\\\perflogss\\\\folder\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\PatientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { initializeDHAuth } from \"../utils/diffieHellman\";\n\n// Create the patient context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientContext = /*#__PURE__*/createContext();\n\n// Patient provider component\nexport const PatientProvider = ({\n  children\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    tokens,\n    refreshToken,\n    dhCredentials\n  } = useAuth();\n\n  // Helper function to handle API requests with token refresh\n  const apiRequest = async (url, method, body = null, isFormData = false) => {\n    setLoading(true);\n    setError(null);\n    try {\n      let headers = {\n        Authorization: `Bearer ${tokens.access}`\n      };\n      if (!isFormData) {\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n      const requestOptions = {\n        method,\n        headers,\n        body: isFormData ? body : body ? JSON.stringify(body) : null\n      };\n      let response = await fetch(url, requestOptions);\n\n      // If token expired, try to refresh it\n      if (response.status === 401) {\n        const refreshed = await refreshToken();\n        if (refreshed) {\n          // Update headers with new token\n          headers.Authorization = `Bearer ${localStorage.getItem(\"accessToken\")}`;\n          // Retry the request\n          response = await fetch(url, {\n            ...requestOptions,\n            headers\n          });\n        }\n      }\n      const data = await response.json();\n      console.log(\"data /////////////\", data);\n      setLoading(false);\n      if (!response.ok) {\n        setError(data.detail || \"Operation failed\");\n        return {\n          success: false,\n          error: data.detail || \"Operation failed\"\n        };\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (err) {\n      setLoading(false);\n      setError(\"Network error or server unavailable\");\n      return {\n        success: false,\n        error: \"Network error\"\n      };\n    }\n  };\n\n  // Add new patient\n  const addPatient = async patientData => {\n    const formData = new FormData();\n    formData.append(\"id\", patientData.id);\n    formData.append(\"name\", patientData.name);\n    formData.append(\"age\", patientData.age);\n\n    // Handle notes field (optional)\n    if (patientData.notes) {\n      formData.append(\"note\", patientData.notes);\n    }\n\n    // Handle image if available\n    if (patientData.image) {\n      formData.append(\"image\", patientData.image);\n    }\n    const result = await apiRequest(\"http://localhost:8000/api/patients/\", \"POST\", formData, true);\n    return result.success ? result.data : null;\n  };\n\n  // Search for patient by ID\n  const findPatientById = async id => {\n    try {\n      const result = await apiRequest(`http://localhost:8000/api/patients/${id}/`, \"GET\");\n      if (result.success) {\n        console.log(\"result.data /////////////\", result.data);\n        return result.data;\n      } else {\n        console.error(\"Error finding patient:\", result.error);\n        return null;\n      }\n    } catch (err) {\n      console.error(\"Exception in findPatientById:\", err);\n      return null;\n    }\n  };\n\n  // Fetch image with Diffie-Hellman authentication\n  const fetchSecureImage = async imageUrl => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Ensure we have DH credentials\n      let credentials = dhCredentials;\n\n      // If no credentials exist, initialize them\n      if (!credentials) {\n        console.log(\"No DH credentials found, initializing new ones\");\n        try {\n          credentials = await initializeDHAuth();\n        } catch (dhInitError) {\n          console.error(\"Failed to initialize DH authentication:\", dhInitError);\n\n          // Check for specific errors mentioned in the documentation\n          if (dhInitError.message.includes(\"Failed to get DH params\")) {\n            throw new Error(\"Could not connect to DH parameters endpoint. Please check your network connection.\");\n          } else if (dhInitError.message.includes(\"Failed to exchange keys\")) {\n            throw new Error(\"Key exchange failed. The server may be unavailable or rejecting the request.\");\n          } else {\n            throw new Error(\"Failed to initialize Diffie-Hellman authentication: \" + dhInitError.message);\n          }\n        }\n      }\n      if (!credentials) {\n        throw new Error(\"Failed to obtain Diffie-Hellman credentials\");\n      }\n\n      // Add cache-busting and DH parameters\n      const cacheParam = `?nocache=${new Date().getTime()}`;\n      const url = `${imageUrl}${cacheParam}`;\n      console.log(\"Fetching secure image with DH authentication\");\n\n      // Make request with both JWT and DH authentication\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${tokens.access}`,\n          \"X-DH-Key\": credentials.sharedSecret,\n          \"X-Client-ID\": credentials.clientId\n        },\n        cache: \"no-store\"\n      });\n\n      // Handle specific error cases from documentation\n      if (response.status === 401) {\n        console.error(\"Authentication failed (401) when fetching image\");\n\n        // Try to regenerate DH credentials and retry once\n        try {\n          console.log(\"Attempting to regenerate DH credentials and retry\");\n          const newCredentials = await initializeDHAuth();\n\n          // Retry with new credentials\n          const retryResponse = await fetch(url, {\n            headers: {\n              Authorization: `Bearer ${tokens.access}`,\n              \"X-DH-Key\": newCredentials.sharedSecret,\n              \"X-Client-ID\": newCredentials.clientId\n            },\n            cache: \"no-store\"\n          });\n          if (!retryResponse.ok) {\n            throw new Error(`Image retrieval failed after credential refresh: ${retryResponse.status} ${retryResponse.statusText}`);\n          }\n          const blob = await retryResponse.blob();\n          const objectUrl = URL.createObjectURL(blob);\n          setLoading(false);\n          return objectUrl;\n        } catch (retryError) {\n          throw new Error(\"Authentication failed. Please try logging out and back in.\");\n        }\n      }\n      if (!response.ok) {\n        throw new Error(`Failed to load image: ${response.status} ${response.statusText}`);\n      }\n      const blob = await response.blob();\n      const objectUrl = URL.createObjectURL(blob);\n      setLoading(false);\n      return objectUrl;\n    } catch (err) {\n      setLoading(false);\n      setError(`Error fetching secure image: ${err.message}`);\n      console.error(\"Error fetching secure image:\", err);\n      return null;\n    }\n  };\n  const value = {\n    loading,\n    error,\n    addPatient,\n    findPatientById,\n    fetchSecureImage\n  };\n  return /*#__PURE__*/_jsxDEV(PatientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using patient context\n_s(PatientProvider, \"duHmEnrHM1OYE4p7MDUC0fSOi24=\", false, function () {\n  return [useAuth];\n});\n_c = PatientProvider;\nexport const usePatients = () => {\n  _s2();\n  const context = useContext(PatientContext);\n  if (!context) {\n    throw new Error(\"usePatients must be used within a PatientProvider\");\n  }\n  return context;\n};\n_s2(usePatients, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useAuth","initializeDHAuth","jsxDEV","_jsxDEV","PatientContext","PatientProvider","children","_s","loading","setLoading","error","setError","tokens","refreshToken","dhCredentials","apiRequest","url","method","body","isFormData","headers","Authorization","access","requestOptions","JSON","stringify","response","fetch","status","refreshed","localStorage","getItem","data","json","console","log","ok","detail","success","err","addPatient","patientData","formData","FormData","append","id","name","age","notes","image","result","findPatientById","fetchSecureImage","imageUrl","credentials","dhInitError","message","includes","Error","cacheParam","Date","getTime","sharedSecret","clientId","cache","newCredentials","retryResponse","statusText","blob","objectUrl","URL","createObjectURL","retryError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePatients","_s2","context","$RefreshReg$"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/context/PatientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { useAuth } from \"./AuthContext\";\r\nimport { initializeDHAuth } from \"../utils/diffieHellman\";\r\n\r\n// Create the patient context\r\nconst PatientContext = createContext();\r\n\r\n// Patient provider component\r\nexport const PatientProvider = ({ children }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { tokens, refreshToken, dhCredentials } = useAuth();\r\n\r\n  // Helper function to handle API requests with token refresh\r\n  const apiRequest = async (url, method, body = null, isFormData = false) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      let headers = {\r\n        Authorization: `Bearer ${tokens.access}`,\r\n      };\r\n\r\n      if (!isFormData) {\r\n        headers[\"Content-Type\"] = \"application/json\";\r\n      }\r\n\r\n      const requestOptions = {\r\n        method,\r\n        headers,\r\n        body: isFormData ? body : body ? JSON.stringify(body) : null,\r\n      };\r\n\r\n      let response = await fetch(url, requestOptions);\r\n\r\n      // If token expired, try to refresh it\r\n      if (response.status === 401) {\r\n        const refreshed = await refreshToken();\r\n        if (refreshed) {\r\n          // Update headers with new token\r\n          headers.Authorization = `Bearer ${localStorage.getItem(\r\n            \"accessToken\"\r\n          )}`;\r\n          // Retry the request\r\n          response = await fetch(url, {\r\n            ...requestOptions,\r\n            headers,\r\n          });\r\n        }\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"data /////////////\", data);\r\n      setLoading(false);\r\n\r\n      if (!response.ok) {\r\n        setError(data.detail || \"Operation failed\");\r\n        return { success: false, error: data.detail || \"Operation failed\" };\r\n      }\r\n\r\n      return { success: true, data };\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(\"Network error or server unavailable\");\r\n      return { success: false, error: \"Network error\" };\r\n    }\r\n  };\r\n\r\n  // Add new patient\r\n  const addPatient = async (patientData) => {\r\n    const formData = new FormData();\r\n    formData.append(\"id\", patientData.id);\r\n    formData.append(\"name\", patientData.name);\r\n    formData.append(\"age\", patientData.age);\r\n\r\n    // Handle notes field (optional)\r\n    if (patientData.notes) {\r\n      formData.append(\"note\", patientData.notes);\r\n    }\r\n\r\n    // Handle image if available\r\n    if (patientData.image) {\r\n      formData.append(\"image\", patientData.image);\r\n    }\r\n\r\n    const result = await apiRequest(\r\n      \"http://localhost:8000/api/patients/\",\r\n      \"POST\",\r\n      formData,\r\n      true\r\n    );\r\n\r\n    return result.success ? result.data : null;\r\n  };\r\n\r\n  // Search for patient by ID\r\n  const findPatientById = async (id) => {\r\n    try {\r\n      const result = await apiRequest(\r\n        `http://localhost:8000/api/patients/${id}/`,\r\n        \"GET\"\r\n      );\r\n\r\n      if (result.success) {\r\n        console.log(\"result.data /////////////\", result.data);\r\n        return result.data;\r\n      } else {\r\n        console.error(\"Error finding patient:\", result.error);\r\n        return null;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Exception in findPatientById:\", err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Fetch image with Diffie-Hellman authentication\r\n  const fetchSecureImage = async (imageUrl) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Ensure we have DH credentials\r\n      let credentials = dhCredentials;\r\n\r\n      // If no credentials exist, initialize them\r\n      if (!credentials) {\r\n        console.log(\"No DH credentials found, initializing new ones\");\r\n        try {\r\n          credentials = await initializeDHAuth();\r\n        } catch (dhInitError) {\r\n          console.error(\"Failed to initialize DH authentication:\", dhInitError);\r\n\r\n          // Check for specific errors mentioned in the documentation\r\n          if (dhInitError.message.includes(\"Failed to get DH params\")) {\r\n            throw new Error(\r\n              \"Could not connect to DH parameters endpoint. Please check your network connection.\"\r\n            );\r\n          } else if (dhInitError.message.includes(\"Failed to exchange keys\")) {\r\n            throw new Error(\r\n              \"Key exchange failed. The server may be unavailable or rejecting the request.\"\r\n            );\r\n          } else {\r\n            throw new Error(\r\n              \"Failed to initialize Diffie-Hellman authentication: \" +\r\n                dhInitError.message\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!credentials) {\r\n        throw new Error(\"Failed to obtain Diffie-Hellman credentials\");\r\n      }\r\n\r\n      // Add cache-busting and DH parameters\r\n      const cacheParam = `?nocache=${new Date().getTime()}`;\r\n      const url = `${imageUrl}${cacheParam}`;\r\n\r\n      console.log(\"Fetching secure image with DH authentication\");\r\n\r\n      // Make request with both JWT and DH authentication\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          Authorization: `Bearer ${tokens.access}`,\r\n          \"X-DH-Key\": credentials.sharedSecret,\r\n          \"X-Client-ID\": credentials.clientId,\r\n        },\r\n        cache: \"no-store\",\r\n      });\r\n\r\n      // Handle specific error cases from documentation\r\n      if (response.status === 401) {\r\n        console.error(\"Authentication failed (401) when fetching image\");\r\n\r\n        // Try to regenerate DH credentials and retry once\r\n        try {\r\n          console.log(\"Attempting to regenerate DH credentials and retry\");\r\n          const newCredentials = await initializeDHAuth();\r\n\r\n          // Retry with new credentials\r\n          const retryResponse = await fetch(url, {\r\n            headers: {\r\n              Authorization: `Bearer ${tokens.access}`,\r\n              \"X-DH-Key\": newCredentials.sharedSecret,\r\n              \"X-Client-ID\": newCredentials.clientId,\r\n            },\r\n            cache: \"no-store\",\r\n          });\r\n\r\n          if (!retryResponse.ok) {\r\n            throw new Error(\r\n              `Image retrieval failed after credential refresh: ${retryResponse.status} ${retryResponse.statusText}`\r\n            );\r\n          }\r\n\r\n          const blob = await retryResponse.blob();\r\n          const objectUrl = URL.createObjectURL(blob);\r\n          setLoading(false);\r\n          return objectUrl;\r\n        } catch (retryError) {\r\n          throw new Error(\r\n            \"Authentication failed. Please try logging out and back in.\"\r\n          );\r\n        }\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `Failed to load image: ${response.status} ${response.statusText}`\r\n        );\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const objectUrl = URL.createObjectURL(blob);\r\n\r\n      setLoading(false);\r\n      return objectUrl;\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(`Error fetching secure image: ${err.message}`);\r\n      console.error(\"Error fetching secure image:\", err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    loading,\r\n    error,\r\n    addPatient,\r\n    findPatientById,\r\n    fetchSecureImage,\r\n  };\r\n\r\n  return (\r\n    <PatientContext.Provider value={value}>{children}</PatientContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using patient context\r\nexport const usePatients = () => {\r\n  const context = useContext(PatientContext);\r\n  if (!context) {\r\n    throw new Error(\"usePatients must be used within a PatientProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}