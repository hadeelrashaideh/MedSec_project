{"ast":null,"code":"/**\r\n * Diffie-Hellman key exchange utility for secure image retrieval\r\n */\n\n/**\r\n * Fetch Diffie-Hellman parameters from the server\r\n * @returns {Promise<Object>} The DH parameters (p, g, server_public_key)\r\n */\nexport const getDHParams = async () => {\n  try {\n    const response = await fetch(\"http://localhost:8000/api/dh-params/\");\n    if (!response.ok) {\n      throw new Error(`Failed to get DH params: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching DH parameters:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Generate a client key pair and exchange with the server\r\n * @param {Object} params - The DH parameters from getDHParams()\r\n * @returns {Promise<Object>} Object containing clientId and sharedSecret\r\n */\nexport const exchangeKeys = async params => {\n  try {\n    // Generate client's private key (random number)\n    const clientPrivateKey = Math.floor(Math.random() * (params.p - 1)) + 1;\n\n    // Calculate client's public key\n    const clientPublicKey = Math.pow(params.g, clientPrivateKey) % params.p;\n\n    // Send client's public key to server\n    const response = await fetch(\"http://localhost:8000/api/dh-exchange/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        client_public_key: clientPublicKey\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to exchange keys: ${response.status}`);\n    }\n    const {\n      client_id\n    } = await response.json();\n\n    // Calculate shared secret using server's public key\n    const sharedSecret = Math.pow(params.server_public_key, clientPrivateKey) % params.p;\n\n    // Hash the shared secret for actual use\n    return {\n      clientId: client_id,\n      sharedSecret: hashString(sharedSecret.toString())\n    };\n  } catch (error) {\n    console.error(\"Error exchanging DH keys:\", error);\n    throw error;\n  }\n};\n\n/**\r\n * Simple hash function for the shared secret\r\n * Note: In production, use a proper cryptographic library\r\n * @param {string} str - The string to hash\r\n * @returns {string} The hashed string\r\n */\nconst hashString = str => {\n  // Simple SHA-256-like hash implementation\n  // In production, use a proper crypto library like crypto-js\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash.toString(16);\n};\n\n/**\r\n * Store DH credentials in localStorage\r\n * @param {string} clientId - The client ID from the server\r\n * @param {string} sharedSecret - The computed shared secret\r\n */\nexport const storeDHCredentials = (clientId, sharedSecret) => {\n  localStorage.setItem(\"dh_client_id\", clientId);\n  localStorage.setItem(\"dh_shared_secret\", sharedSecret);\n};\n\n/**\r\n * Get stored DH credentials from localStorage\r\n * @returns {Object|null} The stored credentials or null if not found\r\n */\nexport const getStoredDHCredentials = () => {\n  const clientId = localStorage.getItem(\"dh_client_id\");\n  const sharedSecret = localStorage.getItem(\"dh_shared_secret\");\n  if (clientId && sharedSecret) {\n    return {\n      clientId,\n      sharedSecret\n    };\n  }\n  return null;\n};\n\n/**\r\n * Clear stored DH credentials\r\n */\nexport const clearDHCredentials = () => {\n  localStorage.removeItem(\"dh_client_id\");\n  localStorage.removeItem(\"dh_shared_secret\");\n};\n\n/**\r\n * Initialize DH authentication flow\r\n * @returns {Promise<Object>} The DH credentials\r\n */\nexport const initializeDHAuth = async () => {\n  try {\n    // Check if we already have stored credentials\n    const storedCreds = getStoredDHCredentials();\n    if (storedCreds) {\n      return storedCreds;\n    }\n\n    // Otherwise, perform the full DH exchange\n    const dhParams = await getDHParams();\n    const {\n      clientId,\n      sharedSecret\n    } = await exchangeKeys(dhParams);\n\n    // Store the credentials for future use\n    storeDHCredentials(clientId, sharedSecret);\n    return {\n      clientId,\n      sharedSecret\n    };\n  } catch (error) {\n    console.error(\"Failed to initialize DH authentication:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getDHParams","response","fetch","ok","Error","status","json","error","console","exchangeKeys","params","clientPrivateKey","Math","floor","random","p","clientPublicKey","pow","g","method","headers","body","JSON","stringify","client_public_key","client_id","sharedSecret","server_public_key","clientId","hashString","toString","str","hash","i","length","char","charCodeAt","storeDHCredentials","localStorage","setItem","getStoredDHCredentials","getItem","clearDHCredentials","removeItem","initializeDHAuth","storedCreds","dhParams"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/utils/diffieHellman.js"],"sourcesContent":["/**\r\n * Diffie-Hellman key exchange utility for secure image retrieval\r\n */\r\n\r\n/**\r\n * Fetch Diffie-Hellman parameters from the server\r\n * @returns {Promise<Object>} The DH parameters (p, g, server_public_key)\r\n */\r\nexport const getDHParams = async () => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:8000/api/dh-params/\");\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to get DH params: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"Error fetching DH parameters:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Generate a client key pair and exchange with the server\r\n * @param {Object} params - The DH parameters from getDHParams()\r\n * @returns {Promise<Object>} Object containing clientId and sharedSecret\r\n */\r\nexport const exchangeKeys = async (params) => {\r\n  try {\r\n    // Generate client's private key (random number)\r\n    const clientPrivateKey = Math.floor(Math.random() * (params.p - 1)) + 1;\r\n\r\n    // Calculate client's public key\r\n    const clientPublicKey = Math.pow(params.g, clientPrivateKey) % params.p;\r\n\r\n    // Send client's public key to server\r\n    const response = await fetch(\"http://localhost:8000/api/dh-exchange/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ client_public_key: clientPublicKey }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to exchange keys: ${response.status}`);\r\n    }\r\n\r\n    const { client_id } = await response.json();\r\n\r\n    // Calculate shared secret using server's public key\r\n    const sharedSecret =\r\n      Math.pow(params.server_public_key, clientPrivateKey) % params.p;\r\n\r\n    // Hash the shared secret for actual use\r\n    return {\r\n      clientId: client_id,\r\n      sharedSecret: hashString(sharedSecret.toString()),\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error exchanging DH keys:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Simple hash function for the shared secret\r\n * Note: In production, use a proper cryptographic library\r\n * @param {string} str - The string to hash\r\n * @returns {string} The hashed string\r\n */\r\nconst hashString = (str) => {\r\n  // Simple SHA-256-like hash implementation\r\n  // In production, use a proper crypto library like crypto-js\r\n  let hash = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const char = str.charCodeAt(i);\r\n    hash = (hash << 5) - hash + char;\r\n    hash = hash & hash; // Convert to 32bit integer\r\n  }\r\n  return hash.toString(16);\r\n};\r\n\r\n/**\r\n * Store DH credentials in localStorage\r\n * @param {string} clientId - The client ID from the server\r\n * @param {string} sharedSecret - The computed shared secret\r\n */\r\nexport const storeDHCredentials = (clientId, sharedSecret) => {\r\n  localStorage.setItem(\"dh_client_id\", clientId);\r\n  localStorage.setItem(\"dh_shared_secret\", sharedSecret);\r\n};\r\n\r\n/**\r\n * Get stored DH credentials from localStorage\r\n * @returns {Object|null} The stored credentials or null if not found\r\n */\r\nexport const getStoredDHCredentials = () => {\r\n  const clientId = localStorage.getItem(\"dh_client_id\");\r\n  const sharedSecret = localStorage.getItem(\"dh_shared_secret\");\r\n\r\n  if (clientId && sharedSecret) {\r\n    return { clientId, sharedSecret };\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Clear stored DH credentials\r\n */\r\nexport const clearDHCredentials = () => {\r\n  localStorage.removeItem(\"dh_client_id\");\r\n  localStorage.removeItem(\"dh_shared_secret\");\r\n};\r\n\r\n/**\r\n * Initialize DH authentication flow\r\n * @returns {Promise<Object>} The DH credentials\r\n */\r\nexport const initializeDHAuth = async () => {\r\n  try {\r\n    // Check if we already have stored credentials\r\n    const storedCreds = getStoredDHCredentials();\r\n    if (storedCreds) {\r\n      return storedCreds;\r\n    }\r\n\r\n    // Otherwise, perform the full DH exchange\r\n    const dhParams = await getDHParams();\r\n    const { clientId, sharedSecret } = await exchangeKeys(dhParams);\r\n\r\n    // Store the credentials for future use\r\n    storeDHCredentials(clientId, sharedSecret);\r\n\r\n    return { clientId, sharedSecret };\r\n  } catch (error) {\r\n    console.error(\"Failed to initialize DH authentication:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}