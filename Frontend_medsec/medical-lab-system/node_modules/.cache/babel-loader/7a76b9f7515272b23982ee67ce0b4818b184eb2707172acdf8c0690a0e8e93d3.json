{"ast":null,"code":"var _jsxFileName = \"C:\\\\perflogss\\\\folder\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\PatientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { useAuth } from \"./AuthContext\";\n\n// Create the patient context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientContext = /*#__PURE__*/createContext();\n\n// Diffie-Hellman key exchange class\nclass DiffieHellman {\n  constructor() {\n    this.sessionId = null;\n    this.privateKey = null;\n    this.publicKey = null;\n    this.sharedKey = null;\n    this.serverPublicKey = null;\n    this.authToken = null;\n    this.initialized = false;\n  }\n\n  // Generate a random number for private key\n  generatePrivateKey() {\n    // In a real implementation, we would use a cryptographically secure random number generator\n    // For this demo, we'll use a simple random number\n    return Math.floor(Math.random() * 1000000) + 1;\n  }\n\n  // Generate public key (simplified for demo)\n  generatePublicKey(privateKey) {\n    // In a real DH implementation, this would use modular exponentiation\n    // g^privateKey mod p, where g and p are agreed-upon constants\n    // For this demo, we'll use a simple calculation\n    return privateKey * 48271 % 2147483647;\n  }\n\n  // Calculate shared key (simplified for demo)\n  calculateSharedKey(privateKey, serverPublicKey) {\n    // In a real DH implementation, this would be serverPublicKey^privateKey mod p\n    // For this demo, we'll use a simple calculation\n    return privateKey * serverPublicKey % 2147483647;\n  }\n\n  // Initialize the DH exchange\n  async initializeExchange(apiRequest) {\n    try {\n      // Generate private and public keys\n      this.privateKey = this.generatePrivateKey();\n      this.publicKey = this.generatePublicKey(this.privateKey);\n\n      // Send our public key to the server\n      const initResult = await apiRequest(\"http://localhost:8000/api/patients/dh-exchange/\", \"POST\", {\n        client_public_key: this.publicKey\n      });\n      if (!initResult.success) {\n        console.error(\"Failed to initialize DH exchange:\", initResult.error);\n        return false;\n      }\n\n      // Store session ID and server public key\n      this.sessionId = initResult.data.session_id;\n      this.serverPublicKey = initResult.data.server_public_key;\n\n      // Calculate shared key\n      this.sharedKey = this.calculateSharedKey(this.privateKey, this.serverPublicKey);\n\n      // Complete the exchange by sending a verification\n      const completeResult = await apiRequest(\"http://localhost:8000/api/patients/dh-exchange/\", \"POST\", {\n        session_id: this.sessionId,\n        verification: this.sharedKey % 10000 // Send a verification code derived from the shared key\n      });\n      if (!completeResult.success) {\n        console.error(\"Failed to complete DH exchange:\", completeResult.error);\n        return false;\n      }\n\n      // Store the auth token\n      this.authToken = completeResult.data.auth_token;\n      this.initialized = true;\n      return true;\n    } catch (error) {\n      console.error(\"Error in DH exchange:\", error);\n      return false;\n    }\n  }\n\n  // Get headers for authenticated image requests\n  getImageAuthHeaders() {\n    if (!this.initialized || !this.sessionId || !this.authToken) {\n      return null;\n    }\n    return {\n      \"X-DH-Session-ID\": this.sessionId,\n      \"X-DH-Auth-Token\": this.authToken\n    };\n  }\n\n  // Reset the DH exchange\n  reset() {\n    this.sessionId = null;\n    this.privateKey = null;\n    this.publicKey = null;\n    this.sharedKey = null;\n    this.serverPublicKey = null;\n    this.authToken = null;\n    this.initialized = false;\n  }\n}\n\n// Patient provider component\nexport const PatientProvider = ({\n  children\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [imageLoading, setImageLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [imageError, setImageError] = useState(null);\n  const {\n    tokens,\n    refreshToken\n  } = useAuth();\n\n  // Create a Diffie-Hellman instance\n  const [diffieHellman] = useState(new DiffieHellman());\n\n  // Helper function to handle API requests with token refresh\n  const apiRequest = async (url, method, body = null, isFormData = false, customHeaders = null) => {\n    setLoading(true);\n    setError(null);\n    try {\n      let headers = {\n        Authorization: `Bearer ${tokens.access}`\n      };\n      if (!isFormData) {\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n\n      // Add custom headers if provided\n      if (customHeaders) {\n        headers = {\n          ...headers,\n          ...customHeaders\n        };\n      }\n      const requestOptions = {\n        method,\n        headers,\n        body: isFormData ? body : body ? JSON.stringify(body) : null\n      };\n      let response = await fetch(url, requestOptions);\n\n      // If token expired, try to refresh it\n      if (response.status === 401) {\n        const refreshed = await refreshToken();\n        if (refreshed) {\n          // Update headers with new token\n          headers.Authorization = `Bearer ${localStorage.getItem(\"accessToken\")}`;\n          // Retry the request\n          response = await fetch(url, {\n            ...requestOptions,\n            headers\n          });\n        }\n      }\n\n      // For non-JSON responses (like images)\n      if (url.includes(\"/image/\")) {\n        if (!response.ok) {\n          const errorText = await response.text();\n          setLoading(false);\n          return {\n            success: false,\n            error: errorText || \"Failed to fetch image\"\n          };\n        }\n        const blob = await response.blob();\n        setLoading(false);\n        return {\n          success: true,\n          data: URL.createObjectURL(blob)\n        };\n      }\n\n      // For JSON responses\n      const data = await response.json();\n      setLoading(false);\n      if (!response.ok) {\n        setError(data.detail || \"Operation failed\");\n        return {\n          success: false,\n          error: data.detail || \"Operation failed\"\n        };\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (err) {\n      setLoading(false);\n      setError(\"Network error or server unavailable\");\n      return {\n        success: false,\n        error: \"Network error\"\n      };\n    }\n  };\n\n  // Add new patient\n  const addPatient = async patientData => {\n    const formData = new FormData();\n    formData.append(\"id\", patientData.id);\n    formData.append(\"name\", patientData.name);\n    formData.append(\"age\", patientData.age);\n\n    // Handle notes field (optional)\n    if (patientData.notes) {\n      formData.append(\"note\", patientData.notes);\n    }\n\n    // Handle image if available\n    if (patientData.image) {\n      formData.append(\"image\", patientData.image);\n    }\n    const result = await apiRequest(\"http://localhost:8000/api/patients/\", \"POST\", formData, true);\n    return result.success ? result.data : null;\n  };\n\n  // Search for patient by ID\n  const findPatientById = async id => {\n    try {\n      const result = await apiRequest(`http://localhost:8000/api/patients/${id}/`, \"GET\");\n      if (result.success) {\n        // Initialize DH exchange for secure image retrieval\n        await diffieHellman.initializeExchange(apiRequest);\n        return result.data;\n      } else {\n        console.error(\"Error finding patient:\", result.error);\n        return null;\n      }\n    } catch (err) {\n      console.error(\"Exception in findPatientById:\", err);\n      return null;\n    }\n  };\n\n  // Fetch patient image with DH authentication\n  const fetchPatientImage = async patientId => {\n    setImageLoading(true);\n    setImageError(null);\n    try {\n      // Check if DH exchange is initialized\n      if (!diffieHellman.initialized) {\n        // Try to initialize DH exchange\n        const initialized = await diffieHellman.initializeExchange(apiRequest);\n        if (!initialized) {\n          setImageLoading(false);\n          setImageError(\"Failed to initialize secure image retrieval\");\n          return null;\n        }\n      }\n\n      // Get DH authentication headers\n      const dhHeaders = diffieHellman.getImageAuthHeaders();\n      if (!dhHeaders) {\n        setImageLoading(false);\n        setImageError(\"Missing authentication for secure image retrieval\");\n        return null;\n      }\n\n      // Fetch the image with DH authentication headers\n      const result = await apiRequest(`http://localhost:8000/api/patients/image/${patientId}/`, \"GET\", null, false, dhHeaders);\n      setImageLoading(false);\n      if (!result.success) {\n        setImageError(result.error || \"Failed to fetch image\");\n        return null;\n      }\n      return result.data; // This should be a blob URL\n    } catch (err) {\n      setImageLoading(false);\n      setImageError(\"Error fetching patient image\");\n      console.error(\"Error in fetchPatientImage:\", err);\n      return null;\n    }\n  };\n\n  // Reset DH exchange (useful for logout or session expiry)\n  const resetDHExchange = () => {\n    diffieHellman.reset();\n  };\n  const value = {\n    loading,\n    imageLoading,\n    error,\n    imageError,\n    addPatient,\n    findPatientById,\n    fetchPatientImage,\n    resetDHExchange\n  };\n  return /*#__PURE__*/_jsxDEV(PatientContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook for using patient context\n_s(PatientProvider, \"97c11cjbLTnfc8SdvyL3HKXBH+Q=\", false, function () {\n  return [useAuth];\n});\n_c = PatientProvider;\nexport const usePatients = () => {\n  _s2();\n  const context = useContext(PatientContext);\n  if (!context) {\n    throw new Error(\"usePatients must be used within a PatientProvider\");\n  }\n  return context;\n};\n_s2(usePatients, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useAuth","jsxDEV","_jsxDEV","PatientContext","DiffieHellman","constructor","sessionId","privateKey","publicKey","sharedKey","serverPublicKey","authToken","initialized","generatePrivateKey","Math","floor","random","generatePublicKey","calculateSharedKey","initializeExchange","apiRequest","initResult","client_public_key","success","console","error","data","session_id","server_public_key","completeResult","verification","auth_token","getImageAuthHeaders","reset","PatientProvider","children","_s","loading","setLoading","imageLoading","setImageLoading","setError","imageError","setImageError","tokens","refreshToken","diffieHellman","url","method","body","isFormData","customHeaders","headers","Authorization","access","requestOptions","JSON","stringify","response","fetch","status","refreshed","localStorage","getItem","includes","ok","errorText","text","blob","URL","createObjectURL","json","detail","err","addPatient","patientData","formData","FormData","append","id","name","age","notes","image","result","findPatientById","fetchPatientImage","patientId","dhHeaders","resetDHExchange","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePatients","_s2","context","Error","$RefreshReg$"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/context/PatientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { useAuth } from \"./AuthContext\";\r\n\r\n// Create the patient context\r\nconst PatientContext = createContext();\r\n\r\n// Diffie-Hellman key exchange class\r\nclass DiffieHellman {\r\n  constructor() {\r\n    this.sessionId = null;\r\n    this.privateKey = null;\r\n    this.publicKey = null;\r\n    this.sharedKey = null;\r\n    this.serverPublicKey = null;\r\n    this.authToken = null;\r\n    this.initialized = false;\r\n  }\r\n\r\n  // Generate a random number for private key\r\n  generatePrivateKey() {\r\n    // In a real implementation, we would use a cryptographically secure random number generator\r\n    // For this demo, we'll use a simple random number\r\n    return Math.floor(Math.random() * 1000000) + 1;\r\n  }\r\n\r\n  // Generate public key (simplified for demo)\r\n  generatePublicKey(privateKey) {\r\n    // In a real DH implementation, this would use modular exponentiation\r\n    // g^privateKey mod p, where g and p are agreed-upon constants\r\n    // For this demo, we'll use a simple calculation\r\n    return (privateKey * 48271) % 2147483647;\r\n  }\r\n\r\n  // Calculate shared key (simplified for demo)\r\n  calculateSharedKey(privateKey, serverPublicKey) {\r\n    // In a real DH implementation, this would be serverPublicKey^privateKey mod p\r\n    // For this demo, we'll use a simple calculation\r\n    return (privateKey * serverPublicKey) % 2147483647;\r\n  }\r\n\r\n  // Initialize the DH exchange\r\n  async initializeExchange(apiRequest) {\r\n    try {\r\n      // Generate private and public keys\r\n      this.privateKey = this.generatePrivateKey();\r\n      this.publicKey = this.generatePublicKey(this.privateKey);\r\n\r\n      // Send our public key to the server\r\n      const initResult = await apiRequest(\r\n        \"http://localhost:8000/api/patients/dh-exchange/\",\r\n        \"POST\",\r\n        { client_public_key: this.publicKey }\r\n      );\r\n\r\n      if (!initResult.success) {\r\n        console.error(\"Failed to initialize DH exchange:\", initResult.error);\r\n        return false;\r\n      }\r\n\r\n      // Store session ID and server public key\r\n      this.sessionId = initResult.data.session_id;\r\n      this.serverPublicKey = initResult.data.server_public_key;\r\n\r\n      // Calculate shared key\r\n      this.sharedKey = this.calculateSharedKey(\r\n        this.privateKey,\r\n        this.serverPublicKey\r\n      );\r\n\r\n      // Complete the exchange by sending a verification\r\n      const completeResult = await apiRequest(\r\n        \"http://localhost:8000/api/patients/dh-exchange/\",\r\n        \"POST\",\r\n        {\r\n          session_id: this.sessionId,\r\n          verification: this.sharedKey % 10000, // Send a verification code derived from the shared key\r\n        }\r\n      );\r\n\r\n      if (!completeResult.success) {\r\n        console.error(\"Failed to complete DH exchange:\", completeResult.error);\r\n        return false;\r\n      }\r\n\r\n      // Store the auth token\r\n      this.authToken = completeResult.data.auth_token;\r\n      this.initialized = true;\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error in DH exchange:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get headers for authenticated image requests\r\n  getImageAuthHeaders() {\r\n    if (!this.initialized || !this.sessionId || !this.authToken) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      \"X-DH-Session-ID\": this.sessionId,\r\n      \"X-DH-Auth-Token\": this.authToken,\r\n    };\r\n  }\r\n\r\n  // Reset the DH exchange\r\n  reset() {\r\n    this.sessionId = null;\r\n    this.privateKey = null;\r\n    this.publicKey = null;\r\n    this.sharedKey = null;\r\n    this.serverPublicKey = null;\r\n    this.authToken = null;\r\n    this.initialized = false;\r\n  }\r\n}\r\n\r\n// Patient provider component\r\nexport const PatientProvider = ({ children }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageLoading, setImageLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [imageError, setImageError] = useState(null);\r\n  const { tokens, refreshToken } = useAuth();\r\n\r\n  // Create a Diffie-Hellman instance\r\n  const [diffieHellman] = useState(new DiffieHellman());\r\n\r\n  // Helper function to handle API requests with token refresh\r\n  const apiRequest = async (\r\n    url,\r\n    method,\r\n    body = null,\r\n    isFormData = false,\r\n    customHeaders = null\r\n  ) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      let headers = {\r\n        Authorization: `Bearer ${tokens.access}`,\r\n      };\r\n\r\n      if (!isFormData) {\r\n        headers[\"Content-Type\"] = \"application/json\";\r\n      }\r\n\r\n      // Add custom headers if provided\r\n      if (customHeaders) {\r\n        headers = { ...headers, ...customHeaders };\r\n      }\r\n\r\n      const requestOptions = {\r\n        method,\r\n        headers,\r\n        body: isFormData ? body : body ? JSON.stringify(body) : null,\r\n      };\r\n\r\n      let response = await fetch(url, requestOptions);\r\n\r\n      // If token expired, try to refresh it\r\n      if (response.status === 401) {\r\n        const refreshed = await refreshToken();\r\n        if (refreshed) {\r\n          // Update headers with new token\r\n          headers.Authorization = `Bearer ${localStorage.getItem(\r\n            \"accessToken\"\r\n          )}`;\r\n          // Retry the request\r\n          response = await fetch(url, {\r\n            ...requestOptions,\r\n            headers,\r\n          });\r\n        }\r\n      }\r\n\r\n      // For non-JSON responses (like images)\r\n      if (url.includes(\"/image/\")) {\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          setLoading(false);\r\n          return {\r\n            success: false,\r\n            error: errorText || \"Failed to fetch image\",\r\n          };\r\n        }\r\n\r\n        const blob = await response.blob();\r\n        setLoading(false);\r\n        return {\r\n          success: true,\r\n          data: URL.createObjectURL(blob),\r\n        };\r\n      }\r\n\r\n      // For JSON responses\r\n      const data = await response.json();\r\n      setLoading(false);\r\n\r\n      if (!response.ok) {\r\n        setError(data.detail || \"Operation failed\");\r\n        return { success: false, error: data.detail || \"Operation failed\" };\r\n      }\r\n\r\n      return { success: true, data };\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setError(\"Network error or server unavailable\");\r\n      return { success: false, error: \"Network error\" };\r\n    }\r\n  };\r\n\r\n  // Add new patient\r\n  const addPatient = async (patientData) => {\r\n    const formData = new FormData();\r\n    formData.append(\"id\", patientData.id);\r\n    formData.append(\"name\", patientData.name);\r\n    formData.append(\"age\", patientData.age);\r\n\r\n    // Handle notes field (optional)\r\n    if (patientData.notes) {\r\n      formData.append(\"note\", patientData.notes);\r\n    }\r\n\r\n    // Handle image if available\r\n    if (patientData.image) {\r\n      formData.append(\"image\", patientData.image);\r\n    }\r\n\r\n    const result = await apiRequest(\r\n      \"http://localhost:8000/api/patients/\",\r\n      \"POST\",\r\n      formData,\r\n      true\r\n    );\r\n\r\n    return result.success ? result.data : null;\r\n  };\r\n\r\n  // Search for patient by ID\r\n  const findPatientById = async (id) => {\r\n    try {\r\n      const result = await apiRequest(\r\n        `http://localhost:8000/api/patients/${id}/`,\r\n        \"GET\"\r\n      );\r\n\r\n      if (result.success) {\r\n        // Initialize DH exchange for secure image retrieval\r\n        await diffieHellman.initializeExchange(apiRequest);\r\n        return result.data;\r\n      } else {\r\n        console.error(\"Error finding patient:\", result.error);\r\n        return null;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Exception in findPatientById:\", err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Fetch patient image with DH authentication\r\n  const fetchPatientImage = async (patientId) => {\r\n    setImageLoading(true);\r\n    setImageError(null);\r\n\r\n    try {\r\n      // Check if DH exchange is initialized\r\n      if (!diffieHellman.initialized) {\r\n        // Try to initialize DH exchange\r\n        const initialized = await diffieHellman.initializeExchange(apiRequest);\r\n        if (!initialized) {\r\n          setImageLoading(false);\r\n          setImageError(\"Failed to initialize secure image retrieval\");\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Get DH authentication headers\r\n      const dhHeaders = diffieHellman.getImageAuthHeaders();\r\n      if (!dhHeaders) {\r\n        setImageLoading(false);\r\n        setImageError(\"Missing authentication for secure image retrieval\");\r\n        return null;\r\n      }\r\n\r\n      // Fetch the image with DH authentication headers\r\n      const result = await apiRequest(\r\n        `http://localhost:8000/api/patients/image/${patientId}/`,\r\n        \"GET\",\r\n        null,\r\n        false,\r\n        dhHeaders\r\n      );\r\n\r\n      setImageLoading(false);\r\n\r\n      if (!result.success) {\r\n        setImageError(result.error || \"Failed to fetch image\");\r\n        return null;\r\n      }\r\n\r\n      return result.data; // This should be a blob URL\r\n    } catch (err) {\r\n      setImageLoading(false);\r\n      setImageError(\"Error fetching patient image\");\r\n      console.error(\"Error in fetchPatientImage:\", err);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Reset DH exchange (useful for logout or session expiry)\r\n  const resetDHExchange = () => {\r\n    diffieHellman.reset();\r\n  };\r\n\r\n  const value = {\r\n    loading,\r\n    imageLoading,\r\n    error,\r\n    imageError,\r\n    addPatient,\r\n    findPatientById,\r\n    fetchPatientImage,\r\n    resetDHExchange,\r\n  };\r\n\r\n  return (\r\n    <PatientContext.Provider value={value}>{children}</PatientContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using patient context\r\nexport const usePatients = () => {\r\n  const context = useContext(PatientContext);\r\n  if (!context) {\r\n    throw new Error(\"usePatients must be used within a PatientProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}