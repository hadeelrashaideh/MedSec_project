{"ast":null,"code":"var _jsxFileName = \"C:\\\\perflogss\\\\folder\\\\New folder (5)\\\\medical-lab-system\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { initializeKeyExchange, completeKeyExchange, setupKeyRefresh } from \"../services/cryptoService\";\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [tokens, setTokens] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [encryptionStatus, setEncryptionStatus] = useState(false);\n\n  // Initialize tokens from localStorage on component mount\n  useEffect(() => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n    const refreshTkn = localStorage.getItem(\"refreshToken\");\n    if (accessToken && refreshTkn) {\n      setTokens({\n        access: accessToken,\n        refresh: refreshTkn\n      });\n\n      // Check if encryption is established\n      if (sessionStorage.getItem(\"encryption_established\") === \"true\") {\n        setEncryptionStatus(true);\n      }\n    }\n\n    // Set up periodic key refresh\n    const cleanupKeyRefresh = setupKeyRefresh(60); // Refresh every 60 minutes\n\n    return () => {\n      cleanupKeyRefresh();\n    };\n  }, []);\n\n  // Login function\n  const login = async (username, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.detail || \"Login failed\");\n      }\n\n      // Save tokens to state and localStorage\n      setTokens({\n        access: data.access,\n        refresh: data.refresh\n      });\n      localStorage.setItem(\"accessToken\", data.access);\n      localStorage.setItem(\"refreshToken\", data.refresh);\n\n      // Set user data\n      setUser({\n        username: data.username,\n        role: data.role,\n        id: data.user_id\n      });\n\n      // Perform key exchange after successful login\n      try {\n        // Step 1: Initialize key exchange\n        const dhParams = await initializeKeyExchange(data.access);\n\n        // Step 2: Complete key exchange\n        await completeKeyExchange(data.access, dhParams);\n\n        // Update encryption status\n        setEncryptionStatus(true);\n      } catch (encryptionError) {\n        console.warn(\"Encryption key exchange failed, using default encryption:\", encryptionError);\n        setEncryptionStatus(false);\n      }\n      setLoading(false);\n      return data;\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"refreshToken\");\n    sessionStorage.removeItem(\"encryption_established\");\n    setTokens(null);\n    setUser(null);\n    setEncryptionStatus(false);\n  };\n\n  // Token refresh function\n  const refreshToken = async () => {\n    if (!(tokens !== null && tokens !== void 0 && tokens.refresh)) return false;\n    try {\n      const response = await fetch(\"http://localhost:8000/api/auth/token/refresh/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh: tokens.refresh\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Clear tokens if refresh fails\n        logout();\n        return false;\n      }\n\n      // Update tokens\n      const newTokens = {\n        ...tokens,\n        access: data.access\n      };\n      setTokens(newTokens);\n      localStorage.setItem(\"accessToken\", data.access);\n\n      // Refresh encryption key\n      try {\n        const dhParams = await initializeKeyExchange(data.access);\n        await completeKeyExchange(data.access, dhParams);\n        setEncryptionStatus(true);\n      } catch (encryptionError) {\n        console.warn(\"Failed to refresh encryption key:\", encryptionError);\n      }\n      return true;\n    } catch (err) {\n      console.error(\"Token refresh error:\", err);\n      logout();\n      return false;\n    }\n  };\n  const value = {\n    tokens,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    refreshToken,\n    encryptionStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook for using auth context\n_s(AuthProvider, \"HD9le8VcpZNGj6UCyAgp76KhQow=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","initializeKeyExchange","completeKeyExchange","setupKeyRefresh","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","tokens","setTokens","user","setUser","loading","setLoading","error","setError","encryptionStatus","setEncryptionStatus","accessToken","localStorage","getItem","refreshTkn","access","refresh","sessionStorage","cleanupKeyRefresh","login","username","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","detail","setItem","role","id","user_id","dhParams","encryptionError","console","warn","err","message","logout","removeItem","refreshToken","newTokens","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/perflogss/folder/New folder (5)/medical-lab-system/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport {\r\n  initializeKeyExchange,\r\n  completeKeyExchange,\r\n  setupKeyRefresh,\r\n} from \"../services/cryptoService\";\r\n\r\n// Create auth context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [tokens, setTokens] = useState(null);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [encryptionStatus, setEncryptionStatus] = useState(false);\r\n\r\n  // Initialize tokens from localStorage on component mount\r\n  useEffect(() => {\r\n    const accessToken = localStorage.getItem(\"accessToken\");\r\n    const refreshTkn = localStorage.getItem(\"refreshToken\");\r\n\r\n    if (accessToken && refreshTkn) {\r\n      setTokens({\r\n        access: accessToken,\r\n        refresh: refreshTkn,\r\n      });\r\n\r\n      // Check if encryption is established\r\n      if (sessionStorage.getItem(\"encryption_established\") === \"true\") {\r\n        setEncryptionStatus(true);\r\n      }\r\n    }\r\n\r\n    // Set up periodic key refresh\r\n    const cleanupKeyRefresh = setupKeyRefresh(60); // Refresh every 60 minutes\r\n\r\n    return () => {\r\n      cleanupKeyRefresh();\r\n    };\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (username, password) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/api/auth/login/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.detail || \"Login failed\");\r\n      }\r\n\r\n      // Save tokens to state and localStorage\r\n      setTokens({\r\n        access: data.access,\r\n        refresh: data.refresh,\r\n      });\r\n\r\n      localStorage.setItem(\"accessToken\", data.access);\r\n      localStorage.setItem(\"refreshToken\", data.refresh);\r\n\r\n      // Set user data\r\n      setUser({\r\n        username: data.username,\r\n        role: data.role,\r\n        id: data.user_id,\r\n      });\r\n\r\n      // Perform key exchange after successful login\r\n      try {\r\n        // Step 1: Initialize key exchange\r\n        const dhParams = await initializeKeyExchange(data.access);\r\n\r\n        // Step 2: Complete key exchange\r\n        await completeKeyExchange(data.access, dhParams);\r\n\r\n        // Update encryption status\r\n        setEncryptionStatus(true);\r\n      } catch (encryptionError) {\r\n        console.warn(\r\n          \"Encryption key exchange failed, using default encryption:\",\r\n          encryptionError\r\n        );\r\n        setEncryptionStatus(false);\r\n      }\r\n\r\n      setLoading(false);\r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setLoading(false);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem(\"accessToken\");\r\n    localStorage.removeItem(\"refreshToken\");\r\n    sessionStorage.removeItem(\"encryption_established\");\r\n    setTokens(null);\r\n    setUser(null);\r\n    setEncryptionStatus(false);\r\n  };\r\n\r\n  // Token refresh function\r\n  const refreshToken = async () => {\r\n    if (!tokens?.refresh) return false;\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8000/api/auth/token/refresh/\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ refresh: tokens.refresh }),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        // Clear tokens if refresh fails\r\n        logout();\r\n        return false;\r\n      }\r\n\r\n      // Update tokens\r\n      const newTokens = {\r\n        ...tokens,\r\n        access: data.access,\r\n      };\r\n\r\n      setTokens(newTokens);\r\n      localStorage.setItem(\"accessToken\", data.access);\r\n\r\n      // Refresh encryption key\r\n      try {\r\n        const dhParams = await initializeKeyExchange(data.access);\r\n        await completeKeyExchange(data.access, dhParams);\r\n        setEncryptionStatus(true);\r\n      } catch (encryptionError) {\r\n        console.warn(\"Failed to refresh encryption key:\", encryptionError);\r\n      }\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Token refresh error:\", err);\r\n      logout();\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    tokens,\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    refreshToken,\r\n    encryptionStatus,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook for using auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}